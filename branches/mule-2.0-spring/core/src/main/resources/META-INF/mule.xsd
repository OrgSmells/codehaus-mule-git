<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<xsd:schema xmlns="http://www.mulesource.org/schema/mule/core/2.0"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:spring="http://www.springframework.org/schema/beans"
            targetNamespace="http://www.mulesource.org/schema/mule/core/2.0"
            attributeFormDefault="unqualified"
            elementFormDefault="qualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans"/>

    <xsd:element name="environment-properties">

        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                    <!--<xsd:attribute name="map-class" default="java.util.HashMap"/>-->
                </xsd:extension>
            </xsd:complexContent>
           
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="endpoint" type="endpointType"/>

    <xsd:element name="model-seda" type="sedaModelType"/>
    <xsd:element name="model-inherited" type="modelType"/>
    <xsd:element name="model-custom" type="customModelType"/>

    <xsd:element name="jndi-transaction-manager" type="transactionManagersType"/>
    <xsd:element name="weblogic-transaction-manager" type="transactionManagersType"/>
    <xsd:element name="websphere-transaction-manager" type="transactionManagersType"/>
    <xsd:element name="jrun-transaction-manager" type="transactionManagersType"/>
    <xsd:element name="jboss-transaction-manager" type="transactionManagersType"/>
    <xsd:element name="resin-transaction-manager" type="transactionManagersType"/>
    <xsd:element name="custom-transaction-manager-factory" type="customTransactionManagersType"/>


    <!--<xsd:element name="security-manager" type="shared:securityManagerType" minOccurs="0"/>-->


    <!--<xsd:element name="connectors" minOccurs="0">-->
    <!--<xsd:complexType>-->
    <!--<xsd:sequence>-->
    <!--<xsd:element ref="connector:custom" minOccurs="0" maxOccurs="unbounded"/>-->
    <!--</xsd:sequence>-->
    <!--</xsd:complexType>-->
    <!--</xsd:element>-->
    <!--<xsd:element name="endpoint-identifiers" type="endpointIdentifiersType" minOccurs="0"/>-->
    <!--<xsd:element name="transformers" minOccurs="0">-->
    <!--<xsd:complexType>-->
    <!--<xsd:sequence>-->
    <!--<xsd:element ref="transformer:custom" minOccurs="0" maxOccurs="unbounded"/>-->
    <!--<xsd:element ref="transformer:object-to-xml" minOccurs="0" maxOccurs="unbounded"/>-->
    <!--<xsd:element ref="transformer:xml-to-object" minOccurs="0" maxOccurs="unbounded"/>-->
    <!--</xsd:sequence>-->
    <!--</xsd:complexType>-->
    <!--</xsd:element>-->
    <!--<xsd:element name="global-endpoints" minOccurs="0">-->
    <!--<xsd:complexType>-->
    <!--<xsd:sequence>-->


    <!--</xsd:sequence>-->
    <!--</xsd:complexType>-->
    <!--</xsd:element>-->
    <!--<xsd:element name="interceptor-stack" type="interceptor:interceptorStackType" minOccurs="0" maxOccurs="unbounded"/>-->
    <!--<xsd:element name="model" type="model:modelType" minOccurs="0" maxOccurs="unbounded"/>-->
    <!--</xsd:choice>-->
    <!--</xsd:sequence>-->
    <!-- -->
    <!--<xsd:attribute name="id" type="xsd:string"/>-->
    <!--<xsd:attribute name="version" use="required">-->
    <!--<xsd:simpleType>-->
    <!--<xsd:restriction base="xsd:NMTOKEN">-->
    <!--<xsd:enumeration value="2.0"/>-->
    <!--</xsd:restriction>-->
    <!--</xsd:simpleType>-->
    <!--</xsd:attribute>-->
    <!-- -->
    <!--</xsd:complexType>-->
    <!-- -->

    <xsd:element name="configuration" type="muleManagementContextType"/>
    <xsd:complexType name="muleManagementContextType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="default-threading-profile" type="threadingProfileType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="default-dispatcher-threading-profile" type="threadingProfileType" minOccurs="0"
                         maxOccurs="1"/>
            <xsd:element name="default-receiver-threading-profile" type="threadingProfileType" minOccurs="0"
                         maxOccurs="1"/>
            <xsd:element name="default-component-threading-profile" type="threadingProfileType" minOccurs="0"
                         maxOccurs="1"/>
            <xsd:group ref="storageTypes" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="default-connection-strategy" type="connectionStrategyType" minOccurs="0" maxOccurs="1"/>
        </xsd:choice>
        <xsd:attribute name="defaultSynchronousEndpoints" type="xsd:boolean" default="false"/>
        <xsd:attribute name="workingDirectory" type="xsd:string" default="./.mule"/>
        <xsd:attribute name="defaultSynchronousEventTimeout" type="xsd:string"/>
        <xsd:attribute name="defaultEncoding" type="xsd:string"/>
        <xsd:attribute name="defaultTransactionTimeout" type="xsd:string"/>
        <xsd:attribute name="defaultRemoteSync" type="xsd:boolean" default="false"/>
        <xsd:attribute name="serverId" type="xsd:string" use="required"/>
        <xsd:attribute name="clusterId" type="xsd:string" use="optional"/>
        <xsd:attribute name="domainId" type="xsd:string" use="optional"/>
    </xsd:complexType>


    <!--==============================================================-->
    <!--   Endpoint elements                                          -->
    <!--==============================================================-->


    <xsd:complexType name="baseEndpointType">
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
            <xsd:element name="transaction" type="transactionType" minOccurs="0" maxOccurs="1"/>
            <xsd:group ref="filters" minOccurs="0" maxOccurs="unbounded"/>
            <!--<xsd:group ref="securityFilters" minOccurs="0" maxOccurs="1"/>-->
            <xsd:group ref="connectionStrategies" minOccurs="0" maxOccurs="1"/>
            <!--<xsd:element name="properties" type="propertiesType" minOccurs="0" maxOccurs="1"/>-->
            <xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:any namespace="##other"/>
            </xsd:choice>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="transformers" type="xsd:string"/>
        <xsd:attribute name="responseTransformers" type="xsd:string"/>
        <xsd:attribute name="synchronous" type="xsd:boolean"/>
        <xsd:attribute name="remoteSync" type="xsd:boolean"/>
        <xsd:attribute name="remoteSyncTimeout" type="xsd:NMTOKEN"/>
        <xsd:attribute name="connector" type="xsd:string"/>
        <xsd:attribute name="createConnector">
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="FIND_OR_CREATE"/>
                    <xsd:enumeration value="ALWAYS_CREATE"/>
                    <xsd:enumeration value="NEVER_CREATE"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="endpointType">
        <xsd:complexContent>
            <xsd:extension base="baseEndpointType">
                <xsd:attribute name="address" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="endpointRefType">
        <xsd:complexContent>
            <xsd:extension base="baseEndpointType">
                <xsd:attribute name="nameref" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="transactionType">
        <xsd:attribute name="factory" type="xsd:NMTOKEN"/>
        <xsd:attribute name="action">
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="NONE"/>
                    <xsd:enumeration value="ALWAYS_BEGIN"/>
                    <xsd:enumeration value="BEGIN_OR_JOIN"/>
                    <xsd:enumeration value="ALWAYS_JOIN"/>
                    <xsd:enumeration value="JOIN_IF_POSSIBLE"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="timeout" type="xsd:NMTOKEN"/>
    </xsd:complexType>

    <xsd:complexType name="replyToType">
        <xsd:attribute name="address" type="xsd:string" use="required"/>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Filter elements                                          -->
    <!--==============================================================-->

    <xsd:group name="filters">
        <xsd:sequence>
            <xsd:choice maxOccurs="unbounded">
                <xsd:element name="and-filter" type="collectionFilterType"/>
                <xsd:element name="or-filter" type="collectionFilterType"/>
                <xsd:element name="not-filter" type="collectionFilterType"/>
                <xsd:element name="exception-type-filter" type="typeFilterType"/>
                <xsd:element name="payload-type-filter" type="typeFilterType"/>
                <xsd:element name="wildcard-filter" type="expressionFilterType"/>
                <xsd:element name="regex-filter" type="expressionFilterType"/>
                <xsd:element name="message-property-filter" type="expressionFilterType"/>
                <xsd:element name="equals-filter" type="filterType"/>
            </xsd:choice>
        </xsd:sequence>
    </xsd:group>

    <xsd:complexType name="collectionFilterType">
        <xsd:complexContent>
            <xsd:extension base="filterType">
                <xsd:group ref="filters" maxOccurs="unbounded" minOccurs="2"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="expressionFilterType">
        <xsd:complexContent>
            <xsd:extension base="filterType">
                <xsd:attribute name="expression" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="typeFilterType">
        <xsd:complexContent>
            <xsd:extension base="filterType">
                <xsd:attribute name="expectedType" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="filterType">
        <xsd:attribute name="not" type="xsd:boolean"/>
    </xsd:complexType>

    <xsd:complexType name="customFilterType">
        <xsd:choice>
            <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="not" type="xsd:boolean"/>
    </xsd:complexType>


    <!-- Todo schemas for each security filter type -->
    <xsd:complexType name="securityFilterType">
        <xsd:sequence>
            <xsd:any namespace="http://www.springframework.org/schema/beans" processContents="strict" minOccurs="0"
                     maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="useProviders" type="xsd:string"/>
        <xsd:attribute name="className" type="xsd:NMTOKEN" use="required"/>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Transformer elements                                          -->
    <!--==============================================================-->

    <xsd:complexType name="transformerType">

        <!--<xsd:choice minOccurs="0" maxOccurs="unbounded">-->
        <!--<xsd:element name="source-type" minOccurs="0" maxOccurs="unbounded">-->
        <!--<xsd:complexType>-->
        <!--<xsd:attribute name="class" use="required"/>-->
        <!--</xsd:complexType>-->
        <!--</xsd:element>-->
        <!--</xsd:choice>-->
        <xsd:attribute name="name" type="xsd:string"/>
        <xsd:attribute name="returnClass" type="xsd:string"/>
        <xsd:attribute name="ignoreBadInput" type="xsd:boolean"/>

    </xsd:complexType>

    <xsd:element name="custom-transformer">
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="transformerType">
                    <xsd:choice>
                        <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:choice>
                    <xsd:attribute name="class" type="xsd:NMTOKEN"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- impls -->
    <xsd:element name="transformer-no-action" type="transformerType"/>
    <xsd:element name="transformer-base64-encoder" type="transformerType"/>
    <xsd:element name="transformer-base64-decoder" type="transformerType"/>
    <xsd:element name="transformer-uc-encoder" type="transformerType"/>
    <xsd:element name="transformer-uc-decoder" type="transformerType"/>
    <xsd:element name="transformer-uu-encoder" type="transformerType"/>
    <xsd:element name="transformer-uu-decoder" type="transformerType"/>
    <xsd:element name="transformer-xml-entity-encoder" type="transformerType"/>
    <xsd:element name="transformer-xml-entity-decoder" type="transformerType"/>
    <xsd:element name="transformer-gzip-compress" type="transformerType"/>
    <xsd:element name="transformer-gzip-uncompress" type="transformerType"/>
    <!-- TODO RM* encryption -->
    <xsd:element name="transformer-encrypt" type="transformerType"/>
    <xsd:element name="transformer-decrypt" type="transformerType"/>

    <xsd:element name="transformer-byte-array-to-hex-string" type="transformerType"/>
    <xsd:element name="transformer-hex-sting-to-byte-array" type="transformerType"/>
    <xsd:element name="transformer-byte-array-to-object" type="transformerType"/>
    <xsd:element name="transformer-object-to-byte-array" type="transformerType"/>
    <xsd:element name="transformer-byte-array-to-serializable" type="transformerType"/>
    <xsd:element name="transformer-serializable-to-byte-array" type="transformerType"/>

    <!-- TODO RM* Wire formats -->

    <!--==============================================================-->
    <!--   Shared elements                                             -->
    <!--==============================================================-->

    <xsd:complexType name="container-contextType">
        <xsd:choice>
            <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="class" type="xsd:string" use="required"/>
        <xsd:attribute name="name" type="xsd:string"/>
    </xsd:complexType>


    <xsd:complexType name="encryptionStrategyType">
        <xsd:choice>
            <xsd:any namespace="http://www.springframework.org/schema/beans" processContents="strict" minOccurs="0"
                     maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="class" type="xsd:string" use="required"/>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>


    <xsd:complexType name="storageType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:any namespace="##other" minOccurs="0" maxOccurs="unbounded"/>

        </xsd:choice>
        <xsd:attribute name="class" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:group name="storageTypes">
        <xsd:choice>
            <xsd:element name="custom-storage" type="storageType"/>
        </xsd:choice>
    </xsd:group>

    <xsd:complexType name="poolingProfileType">
        <xsd:attribute name="maxActive" type="xsd:string"/>
        <xsd:attribute name="maxIdle" type="xsd:string"/>
        <xsd:attribute name="initialisationPolicy" default="INITIALISE_FIRST">
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="INITIALISE_NONE"/>
                    <xsd:enumeration value="INITIALISE_FIRST"/>
                    <xsd:enumeration value="INITIALISE_ALL"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="exhaustedAction" default="GROW">
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="GROW"/>
                    <xsd:enumeration value="WAIT"/>
                    <xsd:enumeration value="FAIL"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="maxWait" type="xsd:string"/>
        <xsd:attribute name="factory" type="xsd:string" default="org.mule.config.pool.CommonsPoolFactory"/>
    </xsd:complexType>


    <xsd:complexType name="queueProfileType">
        <xsd:attribute name="maxOutstandingMessages" type="xsd:string"/>
        <xsd:attribute name="persistent" type="xsd:boolean" default="false"/>
    </xsd:complexType>

    <xsd:complexType name="securityManagerType">
        <xsd:sequence>
            <xsd:element name="security-provider" type="securityProviderType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="encryption-strategy" type="encryptionStrategyType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="class" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="securityProviderType">
        <xsd:attribute name="class" type="xsd:string"/>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="threadingProfileType">
        <xsd:attribute name="maxThreadsActive" type="xsd:string"/>
        <xsd:attribute name="maxThreadsIdle" type="xsd:string"/>
        <xsd:attribute name="threadTTL" type="xsd:string"/>
        <xsd:attribute name="poolExhaustedAction" default="RUN">
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="WAIT"/>
                    <xsd:enumeration value="DISCARD"/>
                    <xsd:enumeration value="DISCARD_OLDEST"/>
                    <xsd:enumeration value="ABORT"/>
                    <xsd:enumeration value="RUN"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="threadWaitTimeout" type="xsd:string"/>
        <xsd:attribute name="doThreading" type="xsd:boolean" default="true"/>
        <xsd:attribute name="maxBufferSize" type="xsd:string"/>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Connector elements                                          -->
    <!--==============================================================-->

    <!-- Custom connector element -->

    <xsd:complexType name="customExceptionStrategyType">
        <xsd:complexContent>
            <xsd:extension base="exceptionStrategyType">
                <xsd:attribute name="class" type="xsd:NMTOKEN" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="exceptionStrategyType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
            <xsd:element name="endpoint" type="endpointType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="endpoint-ref" type="endpointRefType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
    </xsd:complexType>

    <xsd:group name="exceptionStrategies">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="1">
                <xsd:element name="default-component-exception-strategy" type="exceptionStrategyType"/>
                <xsd:element name="default-connector-exception-strategy" type="exceptionStrategyType"/>
                <xsd:element name="custom-exception-strategy" type="customExceptionStrategyType"/>
            </xsd:choice>
        </xsd:sequence>
    </xsd:group>

    <!--==============================================================-->
    <!--   Connector elements                                          -->
    <!--==============================================================-->


    <xsd:complexType name="connectorType">
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
            <xsd:element name="receiver-threading-profile" type="threadingProfileType" minOccurs="0"
                         maxOccurs="1"/>
            <xsd:element name="dispatcher-threading-profile" type="threadingProfileType" minOccurs="0"
                         maxOccurs="1"/>
            <xsd:group ref="exceptionStrategies" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="service-overrides" type="serviceOverridesType" minOccurs="0" maxOccurs="1"/>
        </xsd:choice>

        <xsd:attribute name="name" type="xsd:string" use="required"/>
        <xsd:attribute name="createDispatcherPerRequest" type="xsd:boolean"/>
        <xsd:attribute name="createMultipleTransactedReceivers" type="xsd:boolean"/>
    </xsd:complexType>

    <xsd:complexType name="serviceOverridesType">
        <xsd:attribute name="messageReceiver" type="xsd:NMTOKEN"/>
        <xsd:attribute name="transactedMessageReceiver" type="xsd:NMTOKEN"/>
        <xsd:attribute name="dispatcherFactory" type="xsd:NMTOKEN"/>
        <xsd:attribute name="inboundTransformer" type="xsd:NMTOKEN"/>
        <xsd:attribute name="outboundTransformer" type="xsd:NMTOKEN"/>
        <xsd:attribute name="responseTransformer" type="xsd:NMTOKEN"/>
        <xsd:attribute name="endpointBuilder" type="xsd:NMTOKEN"/>
        <xsd:attribute name="messageAdapter" type="xsd:NMTOKEN"/>
        <xsd:attribute name="streamMessageAdapter" type="xsd:NMTOKEN"/>
        <xsd:attribute name="serviceFinder" type="xsd:NMTOKEN"/>
    </xsd:complexType>


    <!-- ConntectionStrategies group -->

    <xsd:group name="connectionStrategies">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="1">
                <xsd:element ref="retry-connection-strategy"/>
                <xsd:element ref="custom-connection-strategy"/>
            </xsd:choice>
        </xsd:sequence>
    </xsd:group>

    <xsd:complexType name="connectionStrategyType">
        <xsd:attribute name="inbound" type="xsd:boolean" use="required"/>
    </xsd:complexType>

    <xsd:element name="retry-connection-strategy">
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="connectionStrategyType">
                    <xsd:attribute name="retryFrequency" type="xsd:long"/>
                    <xsd:attribute name="retryCount" type="xsd:int"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="custom-connection-strategy">
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="connectionStrategyType">
                    <xsd:attribute name="class" type="xsd:NMTOKEN" use="required"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>


    <!-- Custom connector element -->
    <xsd:element name="custom-connector">
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="connectorType">
                    <xsd:attribute name="class" type="xsd:NMTOKEN" use="required"/>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>


    <!--==============================================================-->
    <!--   Model Types                                                -->
    <!--==============================================================-->

    <xsd:complexType name="sedaModelType">
        <xsd:choice minOccurs="1" maxOccurs="unbounded">
            <xsd:element name="pooling-profile" type="poolingProfileType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="queue-profile" type="queueProfileType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="custom-entrypoint-resolver" type="customEntrypointResolverType" minOccurs="0"
                         maxOccurs="1"/>
            <xsd:element name="callable-entrypoint-resolver" type="entrypointResolverType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="component-factory" type="componentFactoryType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="component-lifecycle-adapter-factory" type="componentLifecycleAdapterFactoryType"
                         minOccurs="0" maxOccurs="1"/>
            <xsd:element name="component-pool-factory" type="componentPoolFactoryType" minOccurs="0"
                         maxOccurs="1"/>
            <xsd:group ref="exceptionStrategies" maxOccurs="1" minOccurs="0"/>
            <xsd:element name="service" type="muleServiceType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="customModelType">
        <xsd:complexContent>
            <xsd:extension base="modelType">
                <xsd:attribute name="class" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="modelType">
        <xsd:choice minOccurs="0" maxOccurs="unbounded">
            <xsd:group ref="exceptionStrategies" maxOccurs="1" minOccurs="0"/>
            <xsd:element name="service" type="muleServiceType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <!--==============================================================-->
    <!--   Model elements                                          -->
    <!--==============================================================-->

    <xsd:complexType name="componentFactoryType">
        <xsd:attribute name="class" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="componentLifecycleAdapterFactoryType">
        <xsd:attribute name="class" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="componentPoolFactoryType">
        <xsd:choice>
            <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="class" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="entrypointResolverType">
    </xsd:complexType>

    <xsd:complexType name="customEntrypointResolverType">
        <xsd:complexContent>
            <xsd:extension base="entrypointResolverType">
                <xsd:attribute name="class" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!--==============================================================-->
    <!--   Mule Service Descriptor                                    -->
    <!--==============================================================-->

    <xsd:complexType name="muleServiceType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="inbound-router" type="inboundRouterCollectionType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="nested-router" type="nestedRouterCollectionType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="outbound-router" type="outboundRouterCollectionType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="response-router" type="responseRouterCollectionType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="threading-profile" type="threadingProfileType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="pooling-profile" type="poolingProfileType" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="queue-profile" type="queueProfileType" minOccurs="0" maxOccurs="1"/>
            <xsd:group ref="exceptionStrategies" maxOccurs="1" minOccurs="0"/>
            <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
        <xsd:attribute name="implementation" type="xsd:string"/>
        <xsd:attribute name="version" type="xsd:string"/>
        <xsd:attribute name="singleton" type="xsd:boolean" default="false"/>
        <xsd:attribute name="initialState" default="started">
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="started"/>
                    <xsd:enumeration value="stopped"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>

    <!--==============================================================-->
    <!--  Routers Core                                                -->
    <!--==============================================================-->


    <xsd:complexType name="inboundRouterCollectionType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="endpoint" type="endpointType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="endpoint-ref" type="endpointRefType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:group ref="catchAllStrategies" minOccurs="0" maxOccurs="1"/>
            <xsd:group ref="inboundRouters" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="matchAll" type="xsd:boolean" default="false"/>
    </xsd:complexType>


    <xsd:complexType name="nestedRouterCollectionType">
        <xsd:choice maxOccurs="unbounded" minOccurs="1">
            <xsd:element name="binding" type="nestedBindingType"/>
        </xsd:choice>
    </xsd:complexType>

    <!--Nested Binding-->
    <xsd:complexType name="nestedBindingType">
        <xsd:choice minOccurs="1" maxOccurs="1">
            <xsd:element name="endpoint" type="endpointType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="endpoint-ref" type="endpointRefType" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="interface" use="required"/>
        <xsd:attribute name="method" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="responseRouterCollectionType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="endpoint" type="endpointType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="endpoint-ref" type="endpointRefType" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:group ref="responseRouters" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="transformers" type="xsd:string"/>
        <xsd:attribute name="timeout" type="xsd:string"/>
    </xsd:complexType>

    <xsd:complexType name="outboundRouterCollectionType">
        <xsd:sequence>
            <xsd:group ref="catchAllStrategies" minOccurs="0" maxOccurs="1"/>
            <xsd:group ref="outboundRouters" minOccurs="1" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="matchAll" type="xsd:boolean" default="false"/>
    </xsd:complexType>


    <!-- Inbound Routers -->

    <xsd:complexType name="nestedInboundRouterType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="endpoint" type="endpointType" minOccurs="0"/>
            <xsd:element name="endpoint-ref" type="endpointRefType" minOccurs="0"/>
            <xsd:group ref="filters" minOccurs="0"/>
        </xsd:choice>
        <xsd:attribute name="propertyExtractor" type="xsd:NMTOKEN"/>
    </xsd:complexType>

    <!-- Inbound Router impls -->
    <xsd:group name="inboundRouters">
        <xsd:choice>
            <xsd:element name="idempotent-receiver-router" type="idempotentReceiverType"/>
            <xsd:element name="idempotent-secure-hash-receiver-router" type="nestedInboundRouterType"/>
            <xsd:element name="pass-through-router" type="nestedInboundRouterType"/>
            <xsd:element name="selective-consumer-router" type="selectiveConsumerRouterType"/>
            <xsd:element name="wire-tap-router" type="wireTapType"/>
            <xsd:element name="correlation-aggregator-router" type="correlationRouterType"/>
            <xsd:element name="message-chunking-aggregator-router" type="correlationRouterType"/>
            <xsd:element name="correlation-resequencer-router" type="correlationRouterType"/>
            <xsd:element name="custom-router" type="customInboundRouterType"/>
        </xsd:choice>
    </xsd:group>

    <xsd:complexType name="idempotentReceiverType">
        <xsd:complexContent>
            <xsd:extension base="nestedInboundRouterType">
                <xsd:choice minOccurs="0" maxOccurs="1">
                    <xsd:element name="store" type="storageType"/>
                </xsd:choice>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="wireTapType">
        <xsd:complexContent>
            <xsd:extension base="nestedInboundRouterType">
                <xsd:choice minOccurs="0" maxOccurs="1">
                    <!--<xsd:element name="endpoint" type="endpointType"/>-->
                    <!--<xsd:element name="endpoint-ref" type="endpointRefType"/>-->
                </xsd:choice>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:complexType name="selectiveConsumerRouterType">
        <xsd:complexContent>
            <xsd:extension base="nestedInboundRouterType">
                <xsd:attribute name="transformers" type="xsd:string"/>
                <xsd:attribute name="transformerFirst" type="xsd:boolean"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="correlationRouterType">
        <xsd:complexContent>
            <xsd:extension base="nestedInboundRouterType">
                <xsd:attribute name="correlationExpression" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="customInboundRouterType">
        <xsd:complexContent>
            <xsd:extension base="nestedInboundRouterType">
                <xsd:attribute name="class" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- ResponseRouters -->
    <xsd:complexType name="responseRouterType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="endpoint" type="endpointType" minOccurs="0"/>
            <xsd:element name="endpoint-ref" type="endpointRefType" minOccurs="0"/>
        </xsd:choice>
        <xsd:attribute name="propertyExtractor" type="xsd:NMTOKEN"/>
    </xsd:complexType>

    <xsd:complexType name="customResponseRouterType">
        <xsd:complexContent>
            <xsd:extension base="responseRouterType">
                <xsd:attribute name="class" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- Router imples -->
    <xsd:group name="responseRouters">
        <xsd:choice>
            <xsd:element name="custom-router" type="customResponseRouterType"/>
        </xsd:choice>
    </xsd:group>


    <xsd:complexType name="outboundRouterType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="endpoint" type="endpointType" minOccurs="0"/>
            <xsd:element name="endpoint-ref" type="endpointRefType" minOccurs="0"/>
            <xsd:element name="reply-to" type="replyToType" minOccurs="0"/>
            <xsd:element name="transaction" type="transactionType" minOccurs="0"/>
            <xsd:group ref="filters" minOccurs="0"/>
        </xsd:choice>
        <xsd:attribute name="enableCorrelation" default="IF_NOT_SET">
            <xsd:simpleType>
                <xsd:restriction base="xsd:NMTOKEN">
                    <xsd:enumeration value="ALWAYS"/>
                    <xsd:enumeration value="NEVER"/>
                    <xsd:enumeration value="IF_NOT_SET"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="propertyExtractor" type="xsd:NMTOKEN"/>
    </xsd:complexType>


    <!-- Outbound Router impls -->
    <xsd:group name="outboundRouters">
        <xsd:choice>
            <xsd:element name="pass-through-router" type="outboundRouterType"/>
            <xsd:element name="filtering-router" type="filteringOutboundRouterType"/>
            <xsd:element name="chaining-router" type="filteringOutboundRouterType"/>
            <xsd:element name="endpoint-selector-router" type="endpointSelectorRouterType"/>
            <xsd:element name="exception-based-router" type="filteringOutboundRouterType"/>
            <xsd:element name="list-message-splitter-router" type="messageSplitterendpointSelectorRouterType"/>
            <xsd:element name="message-chunking-router" type="chunkingRouterType"/>
            <xsd:element name="multicasting-router" type="filteringOutboundRouterType"/>
            <xsd:element name="static-recipient-list-router" type="staticRecipientListRouterType"/>
            <xsd:element name="template-endpoint-router" type="filteringOutboundRouterType"/>
            <xsd:element name="custom-router" type="customOutboundRouterType"/>
        </xsd:choice>
    </xsd:group>

    <xsd:complexType name="filteringOutboundRouterType">
        <xsd:complexContent>
            <xsd:extension base="outboundRouterType">
                <xsd:attribute name="transformers" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="endpointSelectorRouterType">
        <xsd:complexContent>
            <xsd:extension base="filteringOutboundRouterType">
                <xsd:attribute name="selectorProperty" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="messageSplitterendpointSelectorRouterType">
        <xsd:complexContent>
            <xsd:extension base="filteringOutboundRouterType">
                <xsd:attribute name="multimatch" type="xsd:boolean"/>
                <xsd:attribute name="honourSynchronicity" type="xsd:boolean"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="chunkingRouterType">
        <xsd:complexContent>
            <xsd:extension base="filteringOutboundRouterType">
                <xsd:attribute name="messageSize" type="xsd:int"/>
                <xsd:attribute name="numberOfMessages" type="xsd:int"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="staticRecipientListRouterType">
        <xsd:complexContent>
            <xsd:extension base="filteringOutboundRouterType">
                <xsd:attribute name="recipientsProperty" type="xsd:string"/>
                <xsd:attribute name="recipientsDelimiter" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="customOutboundRouterType">
        <xsd:complexContent>
            <xsd:extension base="filteringOutboundRouterType">
                <xsd:attribute name="class" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <!-- Catch all strategy Types -->
    <xsd:complexType name="forwardingCatchAllStrategyType">
        <xsd:choice maxOccurs="unbounded">
            <xsd:element name="endpoint" type="endpointType" minOccurs="0"/>
            <xsd:element name="endpoint-ref" type="endpointRefType" minOccurs="0"/>
        </xsd:choice>
    </xsd:complexType>


    <xsd:complexType name="customCatchAllStrategyType">
        <xsd:attribute name="class" type="xsd:NMTOKEN" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="loggingCatchAllStrategyType">
    </xsd:complexType>


    <xsd:group name="catchAllStrategies">
        <xsd:sequence>
            <xsd:choice minOccurs="0" maxOccurs="1">
                <xsd:element name="logging-catch-all-strategy" type="loggingCatchAllStrategyType"/>
                <xsd:element name="forwarding-catch-all-strategy" type="forwardingCatchAllStrategyType"/>
                <xsd:element name="custom-catch-all-strategy" type="customCatchAllStrategyType"/>
            </xsd:choice>
        </xsd:sequence>
    </xsd:group>


    <!--==============================================================-->
    <!--  Container Contexts                                             -->
    <!--==============================================================-->

    <xsd:element name="custom-container" type="customContainerContextType"/>
    <xsd:element name="rmi-container" type="rmiContainerContextType"/>
    <xsd:element name="ejb-container" type="rmiContainerContextType"/>
    <xsd:element name="properties-container" type="propertiesContainerContextType"/>
    <xsd:element name="plexus-container" type="iocContainerContextType"/>
    <xsd:element name="pico-container" type="iocContainerContextType"/>
    <xsd:element name="hivemind-container" type="iocContainerContextType"/>
    <xsd:element name="jndi-container" type="baseContainerContextType"/>

    <xsd:complexType name="baseContainerContextType">
        <xsd:choice>
            <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
    </xsd:complexType>

    <xsd:complexType name="rmiContainerContextType">
        <xsd:complexContent>
            <xsd:extension base="baseContainerContextType">
                <xsd:attribute name="securityPolicy" type="xsd:string"/>
                <xsd:attribute name="securityManager" type="xsd:string"/>
                <xsd:attribute name="name" type="xsd:string" default="rmi"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="propertiesContainerContextType">
        <xsd:choice>
            <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:choice>
        <xsd:attribute name="name" type="xsd:string" default="properties"/>
        <xsd:attribute name="includeSystemProperties" type="xsd:boolean"/>
        <xsd:attribute name="enableTemplates" type="xsd:boolean"/>
    </xsd:complexType>

    <xsd:complexType name="iocContainerContextType">
        <xsd:complexContent>
            <xsd:extension base="baseContainerContextType">
                <xsd:attribute name="configLocation" type="xsd:string"/>
                <xsd:attribute name="configurationText" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="customContainerContextType">
        <xsd:complexContent>
            <xsd:extension base="baseContainerContextType">
                <xsd:attribute name="class" type="xsd:NMTOKEN" use="required"/>
                <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!--Transaction Managers -->
    <xsd:complexType name="transactionManagersType">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
            <xsd:any namespace="##other"/>
        </xsd:choice>
        <xsd:attribute name="id" default="transactionManagerFactory" use="optional"/>
    </xsd:complexType>

    <xsd:complexType name="customTransactionManagersType">
        <xsd:complexContent>
            <xsd:extension base="transactionManagersType">
                <xsd:attribute name="class" use="required"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- corresponds to TlsIndirectKeyStore, named as tls-client in transport namespace -->
    <xsd:complexType name="tlsClientKeyStoreType">
        <!-- this is the key store defined in system properties that is used implicitly.
        note that some transports use different namespaces within system properties,
        so this is typically global across a particular transport.
        it is also used as the trust store defined in system properties if no other trust
        store is given and explicitTrustStoreOnly is false
        -->
        <xsd:attribute name="clientKeyStore" type="xsd:string"/>
        <xsd:attribute name="clientKeyStorePassword" type="xsd:string"/>
        <xsd:attribute name="clientKeyStoreType" type="xsd:string"/>
    </xsd:complexType>

    <!-- corresponds to TlsDirectKeyStore, named as tls-key-store in transport namespace -->
    <xsd:complexType name="tlsKeyStoreType">
        <xsd:attribute name="keyStore" type="xsd:string"/>
        <xsd:attribute name="keyStoreType" type="xsd:string"/>
        <xsd:attribute name="keyPassword" type="xsd:string"/>
        <xsd:attribute name="keyStorePassword" type="xsd:string"/>
        <xsd:attribute name="keyManagerAlgorithm" type="xsd:string"/>
    </xsd:complexType>

    <!-- corresponds to TlsIndirectTrustStore, named as tls-trust-store in transport namespace -->
    <xsd:complexType name="tlsTrustStoreType">
        <!-- this is the trust store used to construct sockets both explicitly
             and globally (if not set, see client key above) via the jvm defaults. -->
        <xsd:attribute name="trustStore" type="xsd:string"/>
        <xsd:attribute name="trustStorePassword" type="xsd:string"/>
    </xsd:complexType>

    <!-- corresponds to TlsDirectTrustStore, named as tls-server in transport namespace
         note that this extends tlsStrustStoreType, so only one of the two is needed -->
    <xsd:complexType name="tlsServerTrustStoreType">
        <xsd:complexContent>
            <xsd:extension base="tlsTrustStoreType">
                <xsd:attribute name="protocolHandler" type="xsd:string"/>
                <xsd:attribute name="trustStoreType" type="xsd:string"/>
                <xsd:attribute name="trustManagerAlgorithm" type="xsd:string"/>
                <!-- should be of type TrustManagerFactory -->
                <xsd:attribute name="trustManagerFactory" type="xsd:NMTOKEN"/>
                <xsd:attribute name="explicitTrustStoreOnly" type="xsd:boolean"/>
                <xsd:attribute name="requireClientAuthentication" type="xsd:boolean"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

</xsd:schema>