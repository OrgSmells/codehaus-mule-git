<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:osgi="http://www.springframework.org/schema/osgi"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                      http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi.xsd"
   default-init-method="initialise" default-destroy-method="dispose">

    <bean id="muleManager" class="org.mule.modules.osgi.MuleSoaManager"/>

    <!-- Used to set mule object names to their corresponding bean id -->
    <bean id="muleNameProcessor" class="org.mule.extras.spring.MuleObjectNameProcessor"/>

    <bean id="fileConnector" class="org.mule.providers.file.FileConnector">
            <property name="pollingFrequency" value="1000"/>
    </bean>

    <bean id="httpConnector" class="org.mule.providers.http.HttpConnector">
    </bean>

    <!--
           All transformers must be defined here.  For this example we have two transformers
           used to transform the inbound events for the Greeter and Chatter components into
           objects they understand.  The entryPointResolver configured on the Model below will
           determine which method to call on our components based on the return types of these
           transformers.
       -->
    <bean id="BytesToString" class="org.mule.transformers.simple.ByteArrayToString">
        <property name="returnClass"><value>java.lang.String</value></property>
    </bean>
    <osgi:service ref="BytesToString" interface="org.mule.umo.transformer.UMOTransformer" />

    <bean id="HttpToString" class="org.mule.samples.hello.HttpRequestToString">
        <property name="returnClass"><value>java.lang.String</value></property>
    </bean>
    <osgi:service ref="HttpToString" interface="org.mule.umo.transformer.UMOTransformer" />

    <bean id="StringToNameString" class="org.mule.samples.hello.StringToNameString">
        <property name="returnClass"><value>org.mule.samples.hello.NameString</value></property>
    </bean>
    <osgi:service ref="StringToNameString" interface="org.mule.umo.transformer.UMOTransformer" />

    <bean id="NameStringToChatString" class="org.mule.samples.hello.NameStringToChatString">
        <property name="returnClass"><value>org.mule.samples.hello.ChatString</value></property>
    </bean>
    <osgi:service ref="NameStringToChatString" interface="org.mule.umo.transformer.UMOTransformer" />

    <bean id="ChatStringToString" class="org.mule.samples.hello.ChatStringToString">
        <property name="returnClass"><value>java.lang.String</value></property>
    </bean>
    <osgi:service ref="ChatStringToString" interface="org.mule.umo.transformer.UMOTransformer" />

    <!--
        A Mule descriptor defines all the necessary information about how your components will
        interact with the framework, other components in the system and external sources.
        Please refer to the Configuration Guide for a full description of all the parameters.
    -->
    <bean id="GreeterUMO" class="org.mule.impl.MuleDescriptor">
        <property name="inboundEndpoint">
            <bean  class="org.mule.impl.endpoint.MuleEndpoint">
                <property name="endpointURI">
                    <bean class="org.mule.impl.endpoint.MuleEndpointURI">
                        <constructor-arg>
                            <value>file:///tmp/in?transformers=BytesToString,StringToNameString</value>
                        </constructor-arg>
                    </bean>
               </property>
            </bean>
        </property>
        <property name="outboundEndpoint">
            <bean  class="org.mule.impl.endpoint.MuleEndpoint">
                <property name="endpointURI">
                    <bean class="org.mule.impl.endpoint.MuleEndpointURI">
                        <constructor-arg>
                            <value>vm://chitchatter</value>
                        </constructor-arg>
                    </bean>
               </property>
            </bean>
        </property>
        <property name="implementation"><value>Greeter</value></property>
    </bean>

    <!--
    This is the actual bean used by the GreeterUMO. Notice that it is a singleton.  This
    important when component pooling is used (which it is by default).
    -->
    <bean id="Greeter" class="org.mule.samples.hello.Greeter"/>

    <bean id="ChitChatUMO" class="org.mule.impl.MuleDescriptor">
        <property name="inboundEndpoint">
            <bean  class="org.mule.impl.endpoint.MuleEndpoint">
                <property name="endpointURI">
                    <bean class="org.mule.impl.endpoint.MuleEndpointURI">
                        <constructor-arg>
                            <value>vm://chitchatter?transformers=NameStringToChatString</value>
                        </constructor-arg>
                    </bean>
               </property>
            </bean>
        </property>
        <property name="outboundEndpoint">
            <bean  class="org.mule.impl.endpoint.MuleEndpoint">
                <property name="endpointURI">
                    <bean class="org.mule.impl.endpoint.MuleEndpointURI">
                        <constructor-arg>
                            <value>file:///tmp/out?transformers=ChatStringToString</value>
                        </constructor-arg>
                    </bean>
               </property>
            </bean>
        </property>
        <property name="implementation"><value>ChitChatter</value></property>
    </bean>

    <!--
    This is the actual bean used by the ChitChatUMO. Notice that it is a singleton.  This
    important when component pooling is used (which it is by default).
    -->
    <bean id="ChitChatter" class="org.mule.samples.hello.ChitChatter"/>
</beans>
