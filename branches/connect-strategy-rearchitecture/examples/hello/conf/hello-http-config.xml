<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mule-configuration PUBLIC "-//MuleSource //DTD mule-configuration XML V1.0//EN"
                                "http://mule.mulesource.org/dtds/mule-configuration.dtd">

<mule-configuration id="Mule_Hello_Sample_over_Http" version="1.0">

    <description>
    This configuration is identical to the other Hello World example, except that instead of using the console 
    for I/O, other methods are used.  The example demonstrates how easy it is to swap out different transports 
    while never affecting the application.
    </description>
    <!--
    To invoke the Hello service over HTTP, hit the following URL in your browser:

        http://localhost:8888?name=Ross 

    To invoke the Hello service via a Servlet, submit a web form such as:

        <form method="POST" action="/mule-examples/rest?endpoint=greeter">
            <input type="text" name="payload"/>
            <input type="submit" value="POST" />
        </form>
    
    To invoke the Hello service programatically, use the MuleClient:
                    
        MuleClient client = new MuleClient();
        client.send("vm://greeter", "Ross", null);
        UMOMessage response = client.send("vm://greeter", "Ross", null);
        System.out.println("response = " + response.getPayload());
    -->
    
    <mule-environment-properties synchronous="true"/>
    
    <transformers>
        <transformer name="StringToNameString" className="org.mule.samples.hello.StringToNameString"
            returnClass="org.mule.samples.hello.NameString"/>
        <transformer name="NameStringToChatString" className="org.mule.samples.hello.NameStringToChatString"
            returnClass="org.mule.samples.hello.ChatString"/>
        <transformer name="ChatStringToString" className="org.mule.samples.hello.ChatStringToString"
            returnClass="java.lang.String"/>
        <transformer name="HttpRequestToString" className="org.mule.samples.hello.HttpRequestToString"
            returnClass="java.lang.String"/>    
    </transformers>

    <model name="helloSample">
        <!--
            This component receives input from 3 different endpoints (http, servlet, vm) and routes 
            them all to the same place.
        -->
        <mule-descriptor name="GreeterUMO" implementation="org.mule.samples.hello.Greeter">
            <inbound-router>
                <!-- Incoming HTTP requests -->
                <endpoint address="http://localhost:8888" transformers="HttpRequestToString StringToNameString"/>
                
                <!-- Incoming Servlet requests -->
                <endpoint address="servlet://rest" transformers="StringToNameString"/>

                <!-- Incoming VM requests -->
                <endpoint address="vm://greeter" transformers="StringToNameString"/>
            </inbound-router>

            <outbound-router>
                <router className="org.mule.routing.outbound.OutboundPassThroughRouter">
                    <endpoint address="vm://chitchatter"/>
                </router>
            </outbound-router>
        </mule-descriptor>

        <!-- note the response transformer on this component. even though there is no outbound provider
        the transformer will transform the result event and pass it back as the http response -->
        <mule-descriptor name="ChitChatUMO" implementation="org.mule.samples.hello.ChitChatter">
            <inbound-router>
                <endpoint address="vm://chitchatter" transformers="NameStringToChatString" 
                    responseTransformers="ChatStringToString"/>
            </inbound-router>
        </mule-descriptor>
    </model>
</mule-configuration>

