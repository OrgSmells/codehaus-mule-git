/*
 * $Id: MuleXmlConfigBuilderTestCase.java 8530 2007-09-20 21:48:37Z aperepel $
 * --------------------------------------------------------------------------------------
 * Copyright (c) MuleSource, Inc.  All rights reserved.  http://www.mulesource.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

package org.mule.test.config;

import org.mule.MuleException;
import org.mule.RegistryContext;
import org.mule.config.ConfigurationBuilder;
import org.mule.config.ThreadingProfile;
import org.mule.config.builders.MuleXmlConfigurationBuilder;
import org.mule.impl.model.seda.SedaComponent;
import org.mule.providers.AbstractConnector;
import org.mule.routing.outbound.AbstractOutboundRouter;
import org.mule.routing.response.AbstractResponseRouter;
import org.mule.tck.AbstractConfigBuilderTestCase;
import org.mule.tck.testmodels.mule.TestCompressionTransformer;
import org.mule.umo.UMOComponent;
import org.mule.umo.endpoint.UMOEndpoint;
import org.mule.umo.endpoint.UMOImmutableEndpoint;
import org.mule.umo.routing.UMOInboundRouterCollection;
import org.mule.umo.routing.UMOOutboundRouterCollection;
import org.mule.umo.routing.UMOResponseRouterCollection;
import org.mule.umo.transformer.UMOTransformer;
import org.mule.util.properties.JXPathPropertyExtractor;
import org.mule.util.properties.PropertyExtractor;

import java.util.List;

public class MuleXmlConfigBuilderTestCase extends AbstractConfigBuilderTestCase
{

    public String getConfigResources()
    {
        return "test-xml-mule2-config.xml,test-xml-mule2-config-split.xml,test-xml-mule2-config-split-properties.xml";
    }

    // @Override
    public ConfigurationBuilder getBuilder()
    {
        return new MuleXmlConfigurationBuilder();
    }

    public void testPropertyExtractorConfig() throws Exception
    {
        UMOComponent c = managementContext.getRegistry().lookupComponent("propertyExtractorTestComponent");
        assertNotNull(c);
        UMOOutboundRouterCollection router = c.getOutboundRouter();
        assertNotNull(router);
        List routers = router.getRouters();
        assertNotNull(routers);
        assertEquals(1, routers.size());
        AbstractOutboundRouter theRouter = (AbstractOutboundRouter)routers.get(0);
        PropertyExtractor pe = theRouter.getPropertyExtractor();
        assertNotNull(pe);
        // the one we put in the config
        assertTrue(pe instanceof JXPathPropertyExtractor);
    }

    public void testPropertyExtractorResponseRouterConfig() throws Exception
    {
        UMOComponent c = managementContext.getRegistry().lookupComponent("propertyExtractorResponseRouterTestComponent");
        assertNotNull(c);
        UMOResponseRouterCollection router = c.getResponseRouter();
        assertNotNull(router);
        List routers = router.getRouters();
        assertNotNull(routers);
        assertEquals(1, routers.size());
        AbstractResponseRouter theRouter = (AbstractResponseRouter)routers.get(0);
        PropertyExtractor pe = theRouter.getCorrelationExtractor();
        assertNotNull(pe);
        // the one we put in the config
        assertTrue(pe instanceof JXPathPropertyExtractor);
    }

    // TODO Fix after MULE-1933
//    public void testPropertyTypesConfig() throws Exception
//    {
//        UMOComponent c = managementContext.getRegistry().lookupComponent("testPropertiesComponent");
//        assertNotNull(c);
//        assertNotNull(d.getProperties().get("factoryObject"));
//        assertTrue(d.getProperties().get("factoryObject") instanceof Orange);
//        assertNotNull(d.getProperties().get("containerObject"));
//        assertTrue(d.getProperties().get("containerObject") instanceof Apple);
//        assertNull(d.getProperties().get("doesNotExist"));
//        assertEquals(System.getProperty("os.version"), d.getProperties().get("osVersion"));
//        assertEquals("defaultValue", d.getProperties().get("notASystemProperty"));
//        assertEquals("test1", d.getProperties().get("test1"));
//        assertEquals("test2", d.getProperties().get("test2"));
//    }

    // TODO Fix after MULE-1933
//    public void testMapPropertyTypesConfig() throws Exception
//    {
//        UMOComponent c = managementContext.getRegistry().lookupComponent("testPropertiesComponent");
//        assertNotNull(c);
//        Map props = (Map)d.getProperties().get("propertiesMap");
//        assertNotNull(props);
//        assertNotNull(props.get("factoryObject"));
//        assertTrue(props.get("factoryObject") instanceof Orange);
//        assertNotNull(props.get("containerObject"));
//        assertTrue(props.get("containerObject") instanceof Apple);
//        assertNull(props.get("doesNotExist"));
//        assertEquals(System.getProperty("os.version"), props.get("osVersion"));
//        assertEquals("defaultValue", props.get("notASystemProperty"));
//        assertEquals("test1", props.get("test1"));
//        assertEquals("test2", props.get("test2"));
//    }

    // TODO Fix after MULE-1933
//    public void testListPropertyTypesConfig() throws Exception
//    {
//        UMOComponent c = managementContext.getRegistry().lookupComponent("testPropertiesComponent");
//        assertNotNull(c);
//        List props = (List)d.getProperties().get("propertiesList");
//        assertNotNull(props);
//        assertEquals(6, props.size());
//        assertNotNull(props.get(0));
//        assertTrue(props.get(0) instanceof Orange);
//        assertEquals(System.getProperty("os.version"), props.get(1));
//        assertEquals("defaultValue", props.get(2));
//        assertEquals("test1", props.get(3));
//        assertEquals("test2", props.get(4));
//
//        // Container properties are added last
//        assertNotNull(props.get(5));
//        assertTrue(props.get(5) instanceof Apple);
//    }

    public void testEndpointURIParamsConfig()
    {
        UMOComponent c = managementContext.getRegistry().lookupComponent("testPropertiesComponent");
        assertNotNull(c);
        final UMOInboundRouterCollection router = c.getInboundRouter();
        assertNotNull(router);
        final List endpoints = router.getEndpoints();
        assertNotNull(endpoints);
        assertFalse(endpoints.isEmpty());
        final UMOEndpoint inboundEndpoint = (UMOEndpoint) endpoints.get(0);
        assertNotNull(inboundEndpoint);
        final List transformers = inboundEndpoint.getTransformers();
        assertFalse(transformers.isEmpty());
        assertNotNull(transformers.get(0));
        final List responseTransformers = inboundEndpoint.getResponseTransformers();
        assertFalse(responseTransformers.isEmpty());
        assertNotNull(responseTransformers.get(0));
    }

    // @Override
    public void testTransformerConfig()
    {
        // first of all test generic transformer configuration
        super.testTransformerConfig();

        UMOTransformer t = managementContext.getRegistry().lookupTransformer("TestCompressionTransformer");
        assertNotNull(t);
        assertTrue(t instanceof TestCompressionTransformer);

        // This will only work with the MuleXml Builder other implementations
        // will have to set this proerty manually or mimic Mules behaviour
        assertEquals("this was set from the manager properties!",
            ((TestCompressionTransformer)t).getBeanProperty1());
        assertEquals(12, ((TestCompressionTransformer)t).getBeanProperty2());

        assertEquals(t.getReturnClass(), java.lang.String.class);

        t = managementContext.getRegistry().lookupTransformer("TestTransformer");
        assertNotNull(t);
        assertEquals(t.getReturnClass(), byte[].class);
    }

    public void testSystemPropertyOverride()
    {
        assertEquals("default", managementContext.getRegistry().lookupObject("system-prop2"));
    }

    /**
     * The MuleXmlConfiguration builder provides special support for overloading
     * config elements for threadingProfiles, queueProfiles and poolingProfiles, so
     * that defaults can be declared in the main configuration but overiding elements
     * can just replace certain values
     *
     * @throws MuleException
     */
    // @Override
    public void testThreadingConfig() throws MuleException
    {
        // test config
        ThreadingProfile tp = RegistryContext.getConfiguration().getDefaultThreadingProfile();
        assertEquals(0, tp.getMaxBufferSize());
        assertEquals(8, tp.getMaxThreadsActive());
        assertEquals(4, tp.getMaxThreadsIdle());
        assertEquals(0, tp.getPoolExhaustedAction());
        assertEquals(60001, tp.getThreadTTL());

        // test defaults
        tp = RegistryContext.getConfiguration().getDefaultComponentThreadingProfile();
        assertEquals(0, tp.getMaxBufferSize());
        assertEquals(8, tp.getMaxThreadsActive());
        assertEquals(4, tp.getMaxThreadsIdle());
        assertEquals(0, tp.getPoolExhaustedAction());
        assertEquals(60001, tp.getThreadTTL());

        // test thatvalues not set retain a default value
        AbstractConnector c = (AbstractConnector)managementContext.getRegistry().lookupConnector("dummyConnector");
        tp = c.getDispatcherThreadingProfile();
        assertEquals(2, tp.getMaxBufferSize());
        assertEquals(8, tp.getMaxThreadsActive());
        assertEquals(4, tp.getMaxThreadsIdle());
        assertEquals(0, tp.getPoolExhaustedAction());
        assertEquals(60001, tp.getThreadTTL());

        UMOComponent component = managementContext.getRegistry().lookupComponent("appleComponent2");
        assertTrue("component should be SedaComponent", component instanceof SedaComponent);
        SedaComponent seda = (SedaComponent) component;
        tp = seda.getThreadingProfile();
        assertEquals(6, tp.getMaxBufferSize());
        assertEquals(12, tp.getMaxThreadsActive());
        assertEquals(6, tp.getMaxThreadsIdle());
        assertEquals(0, tp.getPoolExhaustedAction());
        assertEquals(60001, tp.getThreadTTL());
    }

    public void testGlobalEndpointOverrides()
    {
        UMOImmutableEndpoint ep = managementContext.getRegistry().lookupEndpoint("orangeEndpoint");
        assertNotNull(ep);
        assertEquals(1, ep.getProperties().size());
        assertEquals("value1", ep.getProperties().get("testGlobal"));
        assertNull(ep.getFilter());

        UMOComponent c = managementContext.getRegistry().lookupComponent("orangeComponent");
        assertNotNull(c);
        ep = c.getInboundRouter().getEndpoint("orangeEndpoint");
        assertNotNull(ep);
        assertEquals(2, ep.getProperties().size());
        assertEquals("value1", ep.getProperties().get("testGlobal"));
        assertEquals("value1", ep.getProperties().get("testLocal"));
        assertNotNull(ep.getFilter());
    }
}
