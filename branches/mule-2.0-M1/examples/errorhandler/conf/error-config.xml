<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mule="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:file="http://www.mulesource.org/schema/mule/file/2.0"
       xmlns:jms="http://www.mulesource.org/schema/mule/jms/2.0"
       xmlns:smtp="http://www.mulesource.org/schema/mule/smtp/2.0"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
       http://www.mulesource.org/schema/mule/file/2.0 http://www.mulesource.org/schema/mule/file/2.0/mule-file.xsd
       http://www.mulesource.org/schema/mule/jms/2.0 http://www.mulesource.org/schema/mule/jms/2.0/mule-jms.xsd
       http://www.mulesource.org/schema/mule/smtp/2.0 http://www.mulesource.org/schema/mule/smtp/2.0/mule-smtp.xsd">
       
    <description>
        This example demonstrates how to publish events to multiple outbound endpoints. 
        The example consists of two components: ExceptionManager and BusinessErrorManager.
    </description>
    
    <bean id="errorManager" class="org.mule.samples.errorhandler.ErrorManager">
        <property name="handlers">
            <list>
                <ref local="fatalHandler"/>
                <ref local="defaultHandler"/>
                <ref local="businessHandler"/>
            </list>
        </property>
    </bean>
    
    <bean id="defaultHandler" class="org.mule.samples.errorhandler.handlers.DefaultHandler">
        <property name="endpointName" value="ExceptionFileWriter"/>
        <property name="errorManager">
            <ref local="errorManager"/>
        </property>
    </bean>

    <bean id="fatalHandler" class="org.mule.samples.errorhandler.handlers.FatalHandler">
        <property name="endpointName" value="ExceptionEmailer"/>
        <property name="errorManager">
            <ref local="errorManager"/>
        </property>
    </bean>

    <bean id="businessHandler" class="org.mule.samples.errorhandler.handlers.BusinessHandler">
        <property name="endpointName" value="ExceptionQueue"/>
        <property name="errorManager">
            <ref local="errorManager"/>
        </property>
    </bean>
    
    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>email.properties</value>
            </list>
        </property>
    </bean>

    <smtp:connector name="EmailConnector"/>

    <jms:activemq-connector name="JMSConnector"/>
    <!-- TODO DO: how to specify this? Fortunately it's the default of AMQ connector but it
         would be good to show an example to specify this anyway
    -->
<!--                            brokerURL="vm://localhost?broker.persistent=false&amp;broker.useJmx=false"/>-->
    
    <file:connector name="FileConnector" 
                    pollingFrequency="1000" 
                    moveToDirectory="./test-data/out"
                    outputPattern="[DATE].xml"/>

    <!-- 
        All transformers must be declared here to be referenced by their names in the 
        endpoint definitions 
    -->
    <mule:custom-transformer name="XMLToExceptionBean"
                             class="org.mule.transformers.xml.XmlToObject"
                             returnClass="org.mule.samples.errorhandler.ExceptionBean"/>
    <mule:custom-transformer name="ExceptionBeanToXML" 
                             class="org.mule.transformers.xml.ObjectToXml"
                             returnClass="java.lang.String"/>
    <mule:custom-transformer name="ExceptionBeanToErrorMessage" 
                             class="org.mule.samples.errorhandler.ExceptionBeanToErrorMessage"
                             returnClass="org.mule.samples.errorhandler.ErrorMessage"/>
    <mule:custom-transformer name="ErrorMessageToException" 
                             class="org.mule.samples.errorhandler.ErrorMessageToException"
                             returnClass="java.lang.Throwable"/>
    <mule:custom-transformer name="ErrorMessageToExceptionBean" 
                             class="org.mule.samples.errorhandler.ErrorMessageToExceptionBean"
                             returnClass="org.mule.samples.errorhandler.ExceptionBean"/>
    <mule:custom-transformer name="StringToEmailMessage" 
                             class="org.mule.providers.email.transformers.StringToEmailMessage"
                             returnClass="javax.mail.Message"/>
    <mule:custom-transformer name="ObjectToJMSMessage"
                             class="org.mule.providers.jms.transformers.ObjectToJMSMessage"
                             returnClass="javax.jms.TextMessage"/>
    <mule:custom-transformer name="JMSMessageToObject" 
                             class="org.mule.providers.jms.transformers.JMSMessageToObject"
                             returnClass="java.lang.String"/>

    <!-- TODO how to handle this? The whole interceptor block is commented out in mule.xsd -->    
<!--    <interceptor-stack name="default">-->
<!--        <interceptor className="org.mule.interceptors.LoggingInterceptor"/>-->
<!--        <interceptor className="org.mule.interceptors.TimerInterceptor"/>-->
<!--    </interceptor-stack>-->
    
    <mule:model-seda name="errorhandler-test">
        <!-- 
            This uses an URL endpointUri instead of a provider config.  Note that this specifies 
            a relative path as the endpoint though fully qualified uri will work i.e. 
            file:///usr/test-data/samples/errorhandler/in
        -->
        <mule:service name="Error Manager">
            <mule:component class="org.mule.samples.errorhandler.ErrorManager">
                <mule:properties>
                    <entry key="handlers">
                        <list>
                            <ref local="fatalHandler"/>
                            <ref local="defaultHandler"/>
                            <ref local="businessHandler"/>
                        </list>
                    </entry>
                </mule:properties>
            </mule:component>
            <mule:inbound-router>
                <mule:endpoint address="file://./test-data/in"
                               transformers="XMLToExceptionBean ExceptionBeanToErrorMessage">
                    <!-- Ignore other files than our XML error input. When runngin this example from
                         a svn checkout the file connector would try to process subversion's meta
                         dirs which is not what we want.
                    -->
                    <mule:custom-filter class="org.mule.providers.file.filters.FilenameWildcardFilter">
                        <mule:property name="pattern" value="*.xml"/>
                    </mule:custom-filter>
                </mule:endpoint>
            </mule:inbound-router>
            
            <mule:outbound-router>
                <mule:custom-catch-all-strategy class="org.mule.routing.LoggingCatchAllStrategy"/>
                
                <mule:filtering-router transformers="ErrorMessageToException">
                    <mule:endpoint address="file://./test-data/exceptions"
                                   transformers="ErrorMessageToExceptionBean ExceptionBeanToXML">
                        <mule:properties>
                            <entry key="outputPattern" value="Exception-[UUID].xml"/>
                        </mule:properties>
                    </mule:endpoint>
                </mule:filtering-router>
                
                <mule:filtering-router transformers="ErrorMessageToException">
                    <mule:endpoint address="smtp://?address=${email.toAddress}"
                                   transformers="ErrorMessageToExceptionBean ExceptionBeanToXML StringToEmailMessage">
                        <mule:properties>
                            <entry key="fromAddress" value="${email.fromAddress}"/>
                            <entry key="subject" value="${email.subject}"/>
                        </mule:properties>
                    </mule:endpoint>
                    <mule:payload-type-filter expectedType="org.mule.umo.lifecycle.FatalException"/>
                </mule:filtering-router>
                
                <mule:filtering-router transformers="ErrorMessageToException">
                    <mule:endpoint address="jms://exception.queue"
                                   transformers="ErrorMessageToExceptionBean ExceptionBeanToXML ObjectToJMSMessage"/>
                    <mule:payload-type-filter expectedType="org.mule.samples.errorhandler.exceptions.BusinessException"/>
                </mule:filtering-router>

                <!-- TODO how to handle this? The whole interceptor block is commented out in mule.xsd -->
<!--                <interceptor name="default"/>-->
            </mule:outbound-router>
        </mule:service>
        
        <mule:service name="Business Error Manager">
            <mule:component class="org.mule.samples.errorhandler.BusinessErrorManager"/>
            <mule:inbound-router>
                <mule:endpoint address="jms://exception.queue"
                               transformers="JMSMessageToObject XMLToExceptionBean ExceptionBeanToErrorMessage"/>
            </mule:inbound-router>
        </mule:service>
    </mule:model-seda>
</beans>

<!-- 
<!DOCTYPE mule-configuration PUBLIC "-//MuleSource //DTD mule-configuration XML V1.0//EN"
                                "http://mule.mulesource.org/dtds/mule-configuration.dtd">

<mule-configuration id="Mule_Error_Handler_Sample" version="1.0">

    <description>
    Demonstrates using Spring as the external container to provide the objects managed by Mule and
    how to publish events to multiple outbound endpoints. The example consists of two components:
    ExceptionManager and BusinessErrorManager.
    </description>

    <environment-properties>
        <file-properties location="email.properties" />
    </environment-properties>

    <container-context className="org.mule.extras.spring.SpringContainerContext">
        <properties>
            <property name="configFile" value="error-beans.xml"/>
        </properties>
    </container-context>

    <connector name="EmailConnector" className="org.mule.providers.email.SmtpConnector">
        <properties>
            <property name="host" value="${smtp.host}" />
            <property name="port" value="{smtp.port}" />
            <property name="username" value="{smtp.username}" />
            <property name="password" value="{smtp.password}" />
        </properties>
    </connector>

    <connector name="JMSConnector" className="org.mule.providers.jms.activemq.ActiveMqJmsConnector">
        <properties>
            <property name="specification" value="1.1"/>
            <!- This property references the Spring container defined above ->
            <container-property name="connectionFactory" reference="activeMqConnectionFactory" />
        </properties>
    </connector>

    <connector name="FileConnector" className="org.mule.providers.file.FileConnector">
        <properties>
            <property name="pollingFrequency" value="1000"/>
            <property name="moveToDirectory" value="./test-data/out"/>
            <property name="outputPattern" value="${DATE}.xml"/>
            <property name="binaryMode" value="false"/>
        </properties>
    </connector>

    <transformers>
        <transformer name="XMLToExceptionBean" className="org.mule.transformers.xml.XmlToObject"
            returnClass="org.mule.samples.errorhandler.ExceptionBean"/>
        <transformer name="ExceptionBeanToXML" className="org.mule.transformers.xml.ObjectToXml"
            returnClass="java.lang.String"/>
        <transformer name="ExceptionBeanToErrorMessage" className="org.mule.samples.errorhandler.ExceptionBeanToErrorMessage"
            returnClass="org.mule.samples.errorhandler.ErrorMessage"/>
        <transformer name="ErrorMessageToException" className="org.mule.samples.errorhandler.ErrorMessageToException"
            returnClass="java.lang.Throwable"/>
        <transformer name="ErrorMessageToExceptionBean" className="org.mule.samples.errorhandler.ErrorMessageToExceptionBean"
            returnClass="org.mule.samples.errorhandler.ExceptionBean"/>
        <transformer name="StringToEmailMessage" className="org.mule.providers.email.transformers.StringToEmailMessage"
            returnClass="javax.mail.Message"/>
        <transformer name="ObjectToJMSMessage" className="org.mule.providers.jms.transformers.ObjectToJMSMessage"
            returnClass="javax.jms.TextMessage">
        </transformer>
        <transformer name="JMSMessageToObject" className="org.mule.providers.jms.transformers.JMSMessageToObject"
            returnClass="java.lang.String"/>
    </transformers>

    <interceptor-stack name="default">
        <interceptor className="org.mule.interceptors.LoggingInterceptor"/>
        <interceptor className="org.mule.interceptors.TimerInterceptor"/>
    </interceptor-stack>

    <model name="errorhandler-test">

        <!- this uses an Url endpointUri instead of a provider config.  Note that this specifies a relative path
        as the endpoiint though fully qualified uri will work ie. file:///usr/test-data/samples/errorhandler/in
        ->
        <mule-descriptor name="Error Manager" implementation="errorManager">
            <inbound-router>
                <endpoint address="file://./test-data/in"
                          transformers="XMLToExceptionBean ExceptionBeanToErrorMessage" />
            </inbound-router>

            <outbound-router>
                <catch-all-strategy className="org.mule.routing.LoggingCatchAllStrategy"/>

                <router className="org.mule.routing.outbound.FilteringOutboundRouter"
                        transformer="ErrorMessageToException">

                    <endpoint address="file://./test-data/exceptions"
                              transformers="ErrorMessageToExceptionBean ExceptionBeanToXML">

                        <properties><property name="outputPattern" value="Exception-${UUID}.xml" /></properties>
                    </endpoint>
                    <filter className="org.mule.routing.filters.PayloadTypeFilter"
                            expectedType="org.mule.MuleException" />
                </router>

                <router className="org.mule.routing.outbound.FilteringOutboundRouter"
                        transformer="ErrorMessageToException">

                    <endpoint address="smtp://?address=${email.toAddress}"
                              transformers="ErrorMessageToExceptionBean ExceptionBeanToXML StringToEmailMessage">
                        <properties>
                            <property name="fromAddress" value="${email.fromAddress}" />
                            <property name="subject" value="${email.subject}" />
                        </properties>
                       </endpoint>

                    <filter className="org.mule.routing.filters.PayloadTypeFilter"
                                        expectedType="org.mule.umo.lifecycle.FatalException"/>
                </router>

                <router className="org.mule.routing.outbound.FilteringOutboundRouter"
                        transformer="ErrorMessageToException">

                    <endpoint address="jms://exception.queue"
                              transformers="ErrorMessageToExceptionBean ExceptionBeanToXML ObjectToJMSMessage"/>

                    <filter className="org.mule.routing.filters.PayloadTypeFilter"
                            expectedType="org.mule.samples.errorhandler.exceptions.BusinessException"/>
                </router>
            </outbound-router>

            <interceptor name="default"/>
        </mule-descriptor>

        <mule-descriptor name="Business Error Manager" implementation="businessErrorManager">
            <inbound-router>
                <endpoint address="jms://exception.queue"
                          transformers="JMSMessageToObject XMLToExceptionBean ExceptionBeanToErrorMessage" />
            </inbound-router>
        </mule-descriptor>
    </model>
</mule-configuration>
 -->