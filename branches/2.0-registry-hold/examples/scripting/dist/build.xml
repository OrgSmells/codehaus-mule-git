<!--
 Copyright (c) MuleSource, Inc.  All rights reserved.  http://www.mulesource.com

 The software in this package is published under the terms of the MuleSource MPL
 license, a copy of which has been included with this distribution in the
 LICENSE.txt file.
-->
<project name="Mule Examples: Scripting" default="deploy">

    <property name="app.name" value="mule-example-scripting"/>

    <property name="dir.conf" value="conf"/>
    <property name="dir.build" value="build"/>
    <property name="dir.classes" value="build/classes"/>

    <property name="url.maven.repo" value="http://maven.sateh.com/repository"/>
    <property name="url.mule-deps.repo" value="http://dist.codehaus.org/mule/dependencies/maven2"/>

    <target name="clean"
            description="Clean the output directory (start from scratch).">
        <delete dir="${dir.build}"/>
    </target>

    <target name="sanity.check">
        <property environment="env"/>
        <property name="dir.mule.home" value="${env.MULE_HOME}"/>
        <property name="dir.user.lib" value="${dir.mule.home}/lib/user/"/>

        <fail message="MULE_HOME environment variable has not been set.">
            <condition>
                <or>
                    <equals arg1="${dir.mule.home}" arg2=""/>
                    <!-- Using a trick here. If there was no MULE_HOME environment variable set,
                        ant will set the value to the unprocessed template string -->
                    <equals arg1="${dir.mule.home}" arg2="$${env.MULE_HOME}"/>
                </or>
            </condition>
        </fail>
    </target>

    <!-- Download any additional libraries needed to run the application -->
    <target name="get.libraries"
            depends="sanity.check">

        <get src="${url.maven.repo}/groovy/groovy-all-1.0-jsr/06/groovy-all-1.0-jsr-06.jar"
             dest="${dir.user.lib}/groovy.jar"
             verbose="true"
             usetimestamp="true"/>
        <get src="${url.mule-deps.repo}/script/jsr223/1.0/jsr223-1.0.jar"
             dest="${dir.user.lib}/jsr223.jar"
             verbose="true"
             usetimestamp="true"/>
    </target>

    <target name="init"
            depends="sanity.check, get.libraries">

        <!-- Create the build directory if it doesn't exist -->
        <mkdir dir="${dir.classes}"/>

        <!-- Configure Mule classpath (mirrors wrapper.conf settings -->
        <path id="classpath.mule">
            <pathelement location="${dir.mule.home}/conf"/>
            <fileset dir="${dir.mule.home}/lib/user">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib/mule">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib/opt">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${dir.mule.home}/lib">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </target>

    <target name="compile"
            depends="init"
            description="Compile the application.">

        <!-- Copy all resources to the output folder as well -->
        <copy todir="${dir.classes}">
            <fileset dir="${dir.conf}"/>
        </copy>
    </target>

   <target name="package"
           depends="compile"
           description="Package the application">

        <jar jarfile="${dir.build}/${app.name}.jar"
             basedir="${dir.classes}"/>
   </target>

   <target name="deploy"
           depends="package"
           description="Deploy the application to the Mule server">

        <copy file="${dir.build}/${app.name}.jar"
              todir="${dir.user.lib}"
              overwrite="true"
              verbose="true"/>
   </target>
</project>
