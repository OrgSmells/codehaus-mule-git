<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
       xmlns:file="http://www.mulesource.org/schema/mule/file/2.2"
       xmlns:jms="http://www.mulesource.org/schema/mule/jms/2.2"
       xmlns:mulexml="http://www.mulesource.org/schema/mule/xml/2.2"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:cxf="http://www.mulesource.org/schema/mule/cxf/2.2"
       xmlns:mule-ss="http://www.mulesource.org/schema/mule/spring-security/2.2"
       xmlns:ss="http://www.springframework.org/schema/security"
       xsi:schemaLocation=" 
       http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
       http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
       http://www.mulesource.org/schema/mule/jms/2.2 http://www.mulesource.org/schema/mule/jms/2.2/mule-jms.xsd
       http://www.mulesource.org/schema/mule/xml/2.2 http://www.mulesource.org/schema/mule/xml/2.2/mule-xml.xsd
       http://www.mulesource.org/schema/mule/cxf/2.2 http://www.mulesource.org/schema/mule/cxf/2.2/mule-cxf.xsd
       http://www.mulesource.org/schema/mule/spring-security/2.2 http://www.mulesource.org/schema/mule/spring-security/2.2/mule-spring-security.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.xsd       
       http://www.mulesource.org/schema/mule/file/2.2 http://www.mulesource.org/schema/mule/file/2.2/mule-file.xsd" 
       > 
       
	<description> 
		Defines any logging configuration required by Mule.
	</description> 
	
	<!-- **************** SECURITY ******************* --> 
	<spring:beans> 
        <ss:authentication-manager alias="authenticationManager" /> 
 
        <ss:authentication-provider> 
            <ss:user-service id="userService"> 
                <ss:user name="ross" password="ross" authorities="ROLE_ADMIN" /> 
                <ss:user name="anon" password="anon" authorities="ROLE_ANON" /> 
            </ss:user-service> 
        </ss:authentication-provider> 
        
        <cxf:security-manager-callback id="serverCallback"/> 
        <spring:bean id="clientCallback" class="org.mule.transport.cxf.wssec.ClientPasswordCallback"/>
    </spring:beans> 
		
	<mule-ss:security-manager> 
        <mule-ss:delegate-security-provider name="memory-provider" delegate-ref="authenticationManager" /> 
    </mule-ss:security-manager> 
    
    <!-- *********************************************** --> 
	
	
	<model name="SecurityTesting">		
  		
  		<service name="secureProxy"> 
  			  		
  			<description> 
  				Secure Proxy using Spring Security
  			</description>  			
			<inbound> 
		    	<cxf:inbound-endpoint address="http://localhost:63081/proxy-envelope"
		    						  proxy="true"
		    						  payload="envelope">		 	        	
		        	 <cxf:inInterceptors> 
		        	 	<spring:bean class="org.apache.cxf.binding.soap.saaj.SAAJInInterceptor" /> 
				        <spring:bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"> 
				            <spring:constructor-arg> 
				                <spring:map> 
				                    <spring:entry key="action" value="UsernameToken" /> 
				                    <spring:entry key="passwordCallbackRef" value-ref="serverCallback" /> 
				                </spring:map> 
				            </spring:constructor-arg> 
				        </spring:bean> 
				    </cxf:inInterceptors>
		        </cxf:inbound-endpoint> 
		    </inbound>
			<outbound>
				<pass-through-router>
					<cxf:outbound-endpoint address="http://localhost:63081/echo" proxy="true" payload="envelope">
						<cxf:outInterceptors>
							<spring:bean class="org.apache.cxf.binding.soap.saaj.SAAJOutInterceptor" />
							<spring:bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
								<spring:constructor-arg>
									<spring:map>
										<spring:entry key="action" value="UsernameToken" />
										<spring:entry key="user" value="User001" />
				                    	<spring:entry key="passwordCallbackRef" value-ref="clientCallback" /> 
    								</spring:map>
								</spring:constructor-arg>
							</spring:bean>
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>
  		
  		<service name="secureProxy2"> 
  			  		
  			<description> 
  				Secure Proxy using Spring Security
  			</description>  			
			<inbound> 
		    	<cxf:inbound-endpoint address="http://localhost:63081/proxy-body"
		    						  proxy="true">		 	        	
		        	 <cxf:inInterceptors> 
		        	 	<spring:bean class="org.apache.cxf.binding.soap.saaj.SAAJInInterceptor" /> 
				        <spring:bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"> 
				            <spring:constructor-arg> 
				                <spring:map> 
				                    <spring:entry key="action" value="UsernameToken" /> 
				                    <spring:entry key="passwordCallbackRef" value-ref="serverCallback" /> 
				                </spring:map> 
				            </spring:constructor-arg> 
				        </spring:bean> 
				    </cxf:inInterceptors>
		        </cxf:inbound-endpoint> 
		    </inbound>
			<outbound>
				<pass-through-router>
					<cxf:outbound-endpoint address="http://localhost:63081/echo" proxy="true">
						<cxf:outInterceptors>
							<spring:bean class="org.apache.cxf.binding.soap.saaj.SAAJOutInterceptor" />
							<spring:bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
								<spring:constructor-arg>
									<spring:map>
										<spring:entry key="action" value="UsernameToken" />
										<spring:entry key="user" value="User001" />
				                    	<spring:entry key="passwordCallbackRef" value-ref="clientCallback" /> 
    								</spring:map>
								</spring:constructor-arg>
							</spring:bean>
						</cxf:outInterceptors>
					</cxf:outbound-endpoint>
				</pass-through-router>
			</outbound>
		</service>
		<service name="echoService">
			<inbound>
				<inbound-endpoint address="http://localhost:63081/echo"/>
			</inbound>
            <echo-component/>
		</service>
	</model> 
	
</mule> 