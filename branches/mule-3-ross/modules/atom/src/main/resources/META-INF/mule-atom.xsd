<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesoft.org/schema/mule/atom"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesoft.org/schema/mule/core"
            xmlns:schemadoc="http://www.mulesoft.org/schema/mule/schemadoc"
            xmlns:beans="http://www.springframework.org/schema/beans"
            targetNamespace="http://www.mulesoft.org/schema/mule/atom"
            elementFormDefault="qualified" attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans"/>
    <xsd:import namespace="http://www.mulesoft.org/schema/mule/core"
                schemaLocation="http://www.mulesoft.org/schema/mule/core/3.0/mule.xsd"/>

    <xsd:import namespace="http://www.mulesoft.org/schema/mule/schemadoc"
                schemaLocation="http://www.mulesoft.org/schema/mule/schemadoc/3.0/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>
            Apache Abdera is a framework which helps you bulid and consume
            Atom feeds and Atom Publishing Protocol services.
        </xsd:documentation>

        <xsd:appinfo>
            <schemadoc:short-name>Abdera</schemadoc:short-name>
            <schemadoc:page-title>Abdera Module</schemadoc:page-title>

            <schemadoc:transport-features receiveEvents="true" dispatchEvents="true" responseEvents="true"
                                          requestEvents="true"
                                          transactions="false" streaming="true">
                <schemadoc:inboundMEPs in-only="true" in-out="true" in-optional-out="true"/>
                <schemadoc:outboundMEPs out-only="true" out-in="true" out-optional-in="true"/>
            </schemadoc:transport-features>
        </xsd:appinfo>
    </xsd:annotation>

    <xsd:element name="route-filter" type="routeFilterType"
                 substitutionGroup="mule:abstract-filter"/>
    <xsd:complexType name="routeFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractFilterType">
                <xsd:attribute name="route" type="xsd:string"/>
                <xsd:attribute name="verbs" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="component" type="atomComponentType"
                 substitutionGroup="mule:abstract-component">
        <xsd:annotation>
            <xsd:documentation>
                Represents an Abdera component.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:element name="feed-splitter-router" type="mule:filteringOutboundRouterType"
                 substitutionGroup="mule:abstract-outbound-router">
        <xsd:annotation>
            <xsd:documentation>
                Will split the entries of a feed into single entry objects.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="atomComponentType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractComponentType">
                <xsd:attributeGroup ref="componentAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:attributeGroup name="componentAttributes">
        <xsd:attribute name="provider-ref" type="xsd:string"/>
    </xsd:attributeGroup>

    <xsd:element name="entry-builder-transformer" type="entryBuilderTransformerType"
                 substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>
                A transformer that uses expressions to configure an Atom Entry. The user can specify one more
                expressions that are used to configure properties on the bean.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="entryBuilderTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:sequence minOccurs="1" maxOccurs="unbounded">
                    <xsd:element name="entry-property">
                        <xsd:complexType>
                            <xsd:attribute name="name" use="required">
                                <xsd:annotation>
                                    <xsd:documentation>
                                        The name of the atom property
                                    </xsd:documentation>
                                </xsd:annotation>
                                <xsd:simpleType>
                                    <xsd:restriction base="mule:substitutableName">
                                        <xsd:enumeration value="content"/>
                                        <xsd:enumeration value="summary"/>
                                        <xsd:enumeration value="id"/>
                                        <xsd:enumeration value="title"/>
                                        <xsd:enumeration value="draft"/>
                                        <xsd:enumeration value="updated"/>
                                        <xsd:enumeration value="published"/>
                                        <xsd:enumeration value="edited"/>
                                        <xsd:enumeration value="author"/>
                                        <xsd:enumeration value="contributor"/>
                                        <xsd:enumeration value="link"/>
                                        <xsd:enumeration value="category"/>
                                        <xsd:enumeration value="rights"/>
                                    </xsd:restriction>
                                </xsd:simpleType>
                            </xsd:attribute>
                            <xsd:attributeGroup ref="mule:expressionAttributes"/>
                            <xsd:attribute name="optional" type="mule:substitutableBoolean" use="optional">
                                <xsd:annotation>
                                    <xsd:documentation>An optional expression means that if the expression evaluates
                                        to null, it will continue to the next expression without error.
                                    </xsd:documentation>
                                </xsd:annotation>
                            </xsd:attribute>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>


    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="mule:abstract-inbound-endpoint"/>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:inboundEndpointType">
                <xsd:attribute name="splitFeed" type="xsd:boolean" default="true">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether the feed entries should be split before routing the data. If split the service
                            component will be invoked for each entry in the feed. Otherwise the feed itself will be used
                            as the
                            data for the message.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="lastUpdate" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            Allows the endpoint to filter out any feed entries before the given date/time. This is only
                            used if the feed
                            is split. the format for the date is is: yyyy-MM-dd hh:mm:ss, for example 2008-12-25
                            13:00:00. If only the date
                            is important you can omit the time part
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="acceptedMimeTypes" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            A comma-separated list of mime types that can be procesed by this endpoint. Typicially users
                            do not need to set this property
                            unless the feed being consumed does not set the mime type correctly. The default for this
                            value is application/rss+xml,application/rss,text/xml
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="pollingFrequency" type="xsd:long">
                    <xsd:annotation>
                        <xsd:documentation>
                            The frequency in milliseconds to check the feed for new entries.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
</xsd:schema>
