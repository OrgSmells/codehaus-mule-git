<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:tls="http://www.mulesource.org/schema/mule/tls/2.0"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
       http://www.mulesource.org/schema/mule/tls/2.0 http://www.mulesource.org/schema/mule/tls/2.0/mule-tls.xsd">

    <!-- keepSendSocketOpen is required for the Async test case?  see TCP -->
    <tls:connector name="tlsConnector" keepSendSocketOpen="true">
        <tls:tls-client
                clientKeyStore="clientKeyStore"
                clientKeyStorePassword="mulepassword"/>
        <tls:tls-key-store
                keyStore="serverKeystore"
                keyStorePassword="mulepassword"
                keyPassword="mulepassword"/>
        <tls:tls-server
                trustStore="trustStore"
                trustStorePassword="mulepassword"/>
    </tls:connector>

    <endpoint name="sendEndpoint" connector-ref="tlsConnector"
                   address="tls://localhost:60198" synchronous="true"/>

    <endpoint name="sendManyEndpoint" connector-ref="tlsConnector"
                   address="tls://localhost:60197" synchronous="true"/>

    <endpoint name="asyncEndpoint" connector-ref="tlsConnector"
                   address="tls://localhost:60196" synchronous="false"/>

    <spring:bean id="reply" class="org.mule.tck.functional.FunctionalTestComponent">
        <spring:property name="eventCallback">
            <spring:bean class="org.mule.tck.functional.CounterCallback"/>
        </spring:property>
    </spring:bean>

    <spring:bean id="countAndReply" class="org.mule.tck.functional.FunctionalTestComponent">
        <spring:property name="eventCallback">
            <spring:bean class="org.mule.tck.functional.CounterCallback"/>
        </spring:property>
    </spring:bean>

    <spring:bean id="asynchronous" class="org.mule.tck.functional.FunctionalTestComponent">
        <spring:property name="eventCallback">
            <spring:bean class="org.mule.tck.functional.ResponseWriterCallback"/>
        </spring:property>
    </spring:bean>

    <model name="main" class="org.mule.tck.testmodels.mule.TestSedaModel">

        <service name="testComponent1">
            <!-- Note: this doesn't need to be a singleton, it's a workaround because I couldn't 
                figure out how to set the eventCallback bean as a property within mule:properties -->
            <component scope="singleton" instance-ref="reply"/>
            <inbound-router>
                <endpoint ref="sendEndpoint"/>
            </inbound-router>
        </service>

        <service name="testComponent2">
            <!-- Note: this doesn't need to be a singleton, it's a workaround because I couldn't 
                figure out how to set the eventCallback bean as a property within mule:properties -->
            <component scope="singleton" instance-ref="countAndReply"/>
            <inbound-router>
                <endpoint ref="sendManyEndpoint"/>
            </inbound-router>
        </service>

        <service name="testComponent3">
            <!-- Note: this doesn't need to be a singleton, it's a workaround because I couldn't 
                figure out how to set the eventCallback bean as a property within mule:properties -->
            <component scope="singleton" instance-ref="asynchronous"/>
            <inbound-router>
                <endpoint ref="asyncEndpoint"/>
            </inbound-router>
        </service>

    </model>

</mule>
