<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:test="http://www.mulesource.org/schema/mule/test/2.0"
       xmlns:mule="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:mxml="http://www.mulesource.org/schema/mule/xml/2.0"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.mulesource.org/schema/mule/test/2.0 http://www.mulesource.org/schema/mule/test/2.0/mule-test.xsd
       http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
       http://www.mulesource.org/schema/mule/xml/2.0 http://www.mulesource.org/schema/mule/xml/2.0/mule-xml.xsd">

    <mule:mule>

        <!-- this is a mule 2 version of test-mule-config.xml.  there is also another
         conversion, with the same name, done by ross, in org.mule.test.spring directory.
         this file is converted by andrew cooke and may converge on ross's translation,
         but currently differs in that it (1) is more detailed/direct and (2) is
         associated with tests (rather than just seeing if parsing fails). -->

        <mule:environment-properties>
            <entry key="doCompression" value="true"/>
            <entry key="beanProperty1" value="this was set from the manager properties!"/>
            <entry key="OS Version" value="${os.version}"/>
            <entry key="system-prop2" value="${system-prop2-cannot-loop}"/> <!-- defaultValue="default" -->
        </mule:environment-properties>

        <!-- environment-properties>
        <property name="doCompression" value="true"/>
        <property name="beanProperty1" value="this was set from the manager properties!"/>
        <system-property name="OS Version" key="os.version"/>
        <system-property name="system-prop2" key="system-prop2" defaultValue="default"/>
    </environment-properties -->

        <mule:configuration serverId="ijio" defaultSynchronousEndpoints="false">
            <mule:default-threading-profile maxBufferSize="0"
                                            maxThreadsActive="8"
                                            maxThreadsIdle="4"
                                            poolExhaustedAction="WAIT"
                                            threadTTL="60001"/>
            <!-- TODO -->
            <!-- seem to be missing default pooling and queue profiles and persistence strategy -->
        </mule:configuration>

        <!-- mule-environment-properties synchronous="false" model="main">
        <threading-profile id="default" maxBufferSize="0" maxThreadsActive="8"
            maxThreadsIdle="4" poolExhaustedAction="WAIT" threadTTL="60001"/>
        <pooling-profile  exhaustedAction="WAIT" maxActive="8" maxIdle="4" maxWait="4000" initialisationPolicy="INITIALISE_FIRST"/>
        <queue-profile maxOutstandingMessages="100" persistent="true"/>
        <persistence-strategy className="org.mule.util.queue.FilePersistenceStrategy"/>
    </mule-environment-properties -->

        <!-- TODO -->
        <!-- seem to be missing any kind of custom transaction manager -->
        <!-- transaction-manager factory="org.mule.tck.testmodels.mule.TestTransactionManagerFactory"/ -->

        <!-- TODO -->
        <!-- daniel is working on management, i think -->
        <!-- agents>
        <agent name="jmxAgent" className="org.mule.management.agents.JmxAgent"/>
    </agents -->

        <test:connector name="dummyConnector">
            <mule:dispatcher-threading-profile maxBufferSize="2"/>
            <mule:custom-exception-strategy class="org.mule.tck.testmodels.mule.TestExceptionStrategy"/>
            <!-- TODO -->
            <!-- no way to specify connection strategy on a connector? -->
        </test:connector>
        <!-- connector name="dummyConnector" className="org.mule.tck.testmodels.mule.TestConnector">
        <threading-profile id="dispatcher" maxBufferSize="2"/>
        <exception-strategy className="org.mule.tck.testmodels.mule.TestExceptionStrategy"/>
        <connection-strategy className="org.mule.providers.SimpleRetryConnectionStrategy">
            <properties>
                <property name="retryCount" value="4"/>
                <property name="frequency" value="3000"/>
            </properties>
        </connection-strategy>
    </connector -->

        <mule:endpoint name="AppleQueue" address="test://apple.queue"/>
        <mule:endpoint name="Banana_Queue" address="test://banana.queue"/>
        <mule:endpoint name="TestQueue" address="test://test.queue"/>
        <!-- endpoint-identifiers>
        <endpoint-identifier name="AppleQueue" value="test://apple.queue"/>
        <endpoint-identifier name="Banana_Queue" value="test://banana.queue"/>
        <endpoint-identifier name="Test Queue" value="test://test.queue"/>
    </endpoint-identifiers -->

        <mule:custom-transformer name="TestCompressionTransformer"
                                 class="org.mule.tck.testmodels.mule.TestCompressionTransformer"
                                 returnClass="java.lang.String">
            <!-- TODO -->
            <!-- unsupported -->
            <!-- mule:property name="org.mule.useManagerProperties" value="true"/ -->
            <!-- mule:property name="beanProperty2" value="12"/ -->
            <!-- TODO -->
            <!-- what's the container-property below? -->
        </mule:custom-transformer>
        <mule:transformer-no-action name="TestTransformer" returnClass="[B"/>
        <!-- transformers>
        <transformer name="TestCompressionTransformer" className="org.mule.tck.testmodels.mule.TestCompressionTransformer"
            returnClass="java.lang.String">
            <properties>
                <property name="org.mule.useManagerProperties" value="true"/>
                <property name="beanProperty2" value="12"/>
                <container-property name="containerProperty" reference="java.lang.String"/>
            </properties>
        </transformer>
        <transformer name="TestTransformer" className="org.mule.transformers.NoActionTransformer"
                    returnClass="[B" />
    </transformers -->

        <mule:endpoint name="fruitBowlEndpoint" address="test://fruitBowlPublishQ">
            <mxml:jxpath-filter pattern="name">
                <mxml:namespace prefix="foo" uri="http://foo.com"/>
                <mxml:context-property key="value" value="bar"/>
            </mxml:jxpath-filter>
        </mule:endpoint>
        <!-- TODO -->
        <!-- cannot have aliases -->
        <!-- mule:endpoint name="waterMelonEndpoint" ref="TestQueue"/ -->
        <mule:endpoint name="waterMelonEndpoint" address="test://tmporary-hack"/>
        <!-- TODO -->
        <!-- cannot specify type of endpoint -->
        <mule:endpoint name="appleInEndpoint" address="test://AppleQueue"/>
        <mule:endpoint name="appleResponseEndpoint" address="test://AppleResponseQueue"/>
        <mule:endpoint name="orangeEndpoint" address="test://orangeQ">
            <mule:properties>
                <entry key="testGlobal" value="value1"/>
            </mule:properties>
        </mule:endpoint>
        <!-- global-endpoints>
        <endpoint name="fruitBowlEndpoint" address="test://fruitBowlPublishQ">
            <filter className="org.mule.routing.filters.xml.JXPathFilter" expression="name">
                <properties>
                    <property name="value" value="bar"/>
                    <map name="namespaces">
                        <property name="foo" value="http://foo.com"/>
                    </map>
                </properties>
            </filter>
        </endpoint>
        <endpoint name="waterMelonEndpoint" address="Test Queue"/>
        <endpoint name="appleInEndpoint" type="receiver" address="test://AppleQueue"/>
        <endpoint name="appleResponseEndpoint" type="receiver" address="test://AppleResponseQueue"/>
        <endpoint name="orangeEndpoint" address="test://orangeQ">
            <properties>
                <property name="testGlobal" value="value1"/>
            </properties>
        </endpoint>
    </global-endpoints -->

    </mule:mule>

    <bean name="orange" class="org.mule.tck.testmodels.fruit.Orange">
        <property name="brand" value="Juicy Baby!"/>
        <property name="segments" value="9"/>
        <property name="radius" value="4.21"/>
        <property name="mapProperties">
            <map>
                <entry key="prop1" value="prop1"/>
                <entry key="prop2" value="prop2"/>
            </map>
        </property>
        <property name="listProperties">
            <list>
                <value>prop1</value>
                <value>prop2</value>
                <value>prop3</value>
            </list>
        </property>
        <property name="arrayProperties">
            <list>
                <value>prop4</value>
                <value>prop5</value>
                <value>prop6</value>
            </list>
        </property>
    </bean>
    <!-- properties>
        <factory-property name="orange" factory="org.mule.tck.testmodels.fruit.Orange"/>
        <property name="brand" value="Juicy Baby!"/>
        <property name="segments" value="9"/>
        <property name="radius" value="4.21"/>
        <map name="mapProperties">
            <property name="prop1" value="prop1"/>
            <property name="prop2" value="prop2"/>
        </map>
        <list name="listProperties">
            <entry value="prop1"/>
            <entry value="prop2"/>
            <entry value="prop3"/>
        </list>
        <list name="arrayProperties">
            <entry value="prop4"/>
            <entry value="prop5"/>
            <entry value="prop6"/>
        </list>
    </properties -->

    <mule:mule>

        <mule:model name="main">

            <!-- TODO -->
            <!-- entry point resolver? -->
            <!-- entry-point-resolver className="org.mule.tck.testmodels.mule.TestEntryPointResolver"/ -->

            <mule:custom-exception-strategy class="org.mule.tck.testmodels.mule.TestExceptionStrategy">
                <mule:endpoint address="test://component.exceptions"/>
            </mule:custom-exception-strategy>
            <!-- exception-strategy className="org.mule.tck.testmodels.mule.TestExceptionStrategy">
           <endpoint address="test://component.exceptions"/>
        </exception-strategy -->

            <!-- component-lifecycle-adapter-factory className="org.mule.tck.testmodels.mule.TestDefaultLifecycleAdapterFactory"/ -->

            <mule:service name="orangeComponent">

                <mule:component scope="singleton" instance-ref="orange"/>
                <!-- mule-descriptor name="orangeComponent" implementation="orange" container="descriptor" -->

                <mule:inbound-router>
                    <mule:forwarding-catch-all-strategy>
                        <mule:endpoint address="test://catch.all"/>
                    </mule:forwarding-catch-all-strategy>
                    <!-- catch-all-strategy className="org.mule.routing.ForwardingCatchAllStrategy">
                    <endpoint address="test://catch.all"/>
                </catch-all-strategy -->
                    <mule:endpoint name="Orange"
                                   address="test://orange/"
                                   transformers="TestCompressionTransformer"
                                   responseTransformers="TestCompressionTransformer"/>
                    <!-- endpoint name="Orange" type="receiver" address="test://orange/" transformers="TestCompressionTransformer"
                    responseTransformers="TestCompressionTransformer"/ -->
                    <mule:endpoint ref="orangeEndpoint" transformers="TestCompressionTransformer">
                        <mule:payload-type-filter expectedType="java.lang.String"/>
                        <mule:properties>
                            <entry key="testLocal" value="value1"/>
                        </mule:properties>
                    </mule:endpoint>
                    <!-- global-endpoint name="orangeEndpoint" transformers="TestCompressionTransformer">
                    <filter className="org.mule.routing.filters.PayloadTypeFilter" expectedType="java.lang.String"/>
                    <properties>
                        <property name="testLocal" value="value1"/>
                    </properties>
                </global-endpoint -->
                </mule:inbound-router>

                <mule:nested-router>
                    <mule:binding interface="org.mule.tck.testmodels.fruit.FruitCleaner" method="wash">
                        <mule:endpoint address="test://do.wash"/>
                    </mule:binding>
                    <!-- binding interface="org.mule.tck.testmodels.fruit.FruitCleaner" method="wash">
                    <endpoint address="test://do.wash"/>
                </binding -->
                    <mule:binding interface="org.mule.tck.testmodels.fruit.FruitCleaner" method="polish">
                        <mule:endpoint address="test://do.polish"/>
                    </mule:binding>
                    <!-- binding interface="org.mule.tck.testmodels.fruit.FruitCleaner" method="polish">
                    <endpoint address="test://do.polish"/>
                </binding -->
                </mule:nested-router>

                <mule:outbound-router>
                    <mule:outbound-pass-through-router>
                        <!-- TODO -->
                        <!-- shouldn't it be transformers-ref? -->
                        <mule:endpoint ref="appleInEndpoint" transformers="TestCompressionTransformer"/>
                    </mule:outbound-pass-through-router>
                </mule:outbound-router>
                <!-- outbound-router>
                <router className="org.mule.routing.outbound.OutboundPassThroughRouter">
                    <global-endpoint name="appleInEndpoint" transformers="TestCompressionTransformer"/>
                </router>
            </outbound-router -->

                <mule:response-router timeout="10001">
                    <mule:endpoint address="test://response1"/>
                    <mule:endpoint ref="appleResponseEndpoint"/>
                    <mule:custom-response-router class="org.mule.tck.testmodels.mule.TestResponseAggregator"/>
                </mule:response-router>
                <!-- response-router timeout="10001">
                <endpoint address="test://response1"/>
                <global-endpoint name="appleResponseEndpoint"/>
                <router className="org.mule.tck.testmodels.mule.TestResponseAggregator"/>
            </response-router -->

                <mule:default-connector-exception-strategy>
                    <mule:endpoint address="test://orange.exceptions"/>
                </mule:default-connector-exception-strategy>
                <!-- exception-strategy className="org.mule.impl.DefaultComponentExceptionStrategy">
                   <endpoint address="test://orange.exceptions"/>
                </exception-strategy -->

                <!-- moved to bean -->
                <!-- properties>
                <factory-property name="orange" factory="org.mule.tck.testmodels.fruit.Orange"/>
                <property name="brand" value="Juicy Baby!"/>
                <property name="segments" value="9"/>
                <property name="radius" value="4.21"/>
                <map name="mapProperties">
                    <property name="prop1" value="prop1"/>
                    <property name="prop2" value="prop2"/>
                </map>
                <list name="listProperties">
                    <entry value="prop1"/>
                    <entry value="prop2"/>
                    <entry value="prop3"/>
                </list>
                <list name="arrayProperties">
                    <entry value="prop4"/>
                    <entry value="prop5"/>
                    <entry value="prop6"/>
                </list>
            </properties -->

            </mule:service>

            <mule:service name="appleComponent">

                <mule:component class="org.mule.tck.testmodels.fruit.Apple"/>

                <mule:inbound-router>
                    <mule:custom-catch-all-strategy class="org.mule.tck.testmodels.mule.TestCatchAllStrategy"/>
                    <mule:endpoint ref="appleInEndpoint"/>
                    <mule:selective-consumer-router>
                        <mule:payload-type-filter expectedType="java.lang.String"/>
                    </mule:selective-consumer-router>
                    <mule:idempotent-receiver-router/>
                </mule:inbound-router>
                <!-- inbound-router>
                <catch-all-strategy className="org.mule.tck.testmodels.mule.TestCatchAllStrategy"/>
                <global-endpoint name="appleInEndpoint"/>
                <router className="org.mule.routing.inbound.SelectiveConsumer">
                    <filter expectedType="java.lang.String" className="org.mule.routing.filters.PayloadTypeFilter"/>
                </router>
                <router className="org.mule.routing.inbound.IdempotentReceiver"/>
            </inbound-router -->

                <mule:outbound-router>
                    <mule:custom-catch-all-strategy class="org.mule.tck.testmodels.mule.TestCatchAllStrategy"/>
                    <mule:filtering-router>
                        <mule:endpoint name="TestApple-Out" address="test://appleQ2" transformers="TestCompressionTransformer"/>
                        <mule:payload-type-filter expectedType="java.lang.String"/>
                    </mule:filtering-router>
                    <mule:filtering-router>
                        <mule:endpoint ref="waterMelonEndpoint"/>
                        <mule:and-filter>
                            <mule:regex-filter pattern="the quick brown (.*)"/>
                            <mule:regex-filter pattern="(.*) brown (.*)"/>
                        </mule:and-filter>
                    </mule:filtering-router>
                </mule:outbound-router>
                <!-- outbound-router>
                <catch-all-strategy className="org.mule.tck.testmodels.mule.TestCatchAllStrategy"/>
                <router className="org.mule.routing.outbound.FilteringOutboundRouter">
                    <endpoint name="TestApple-Out" type="sender" address="test://appleQ2"/>
                    <filter expectedType="java.lang.String" className="org.mule.routing.filters.PayloadTypeFilter"/>
                    <properties>
                        <property name="transformer" value="TestCompressionTransformer"/>
                    </properties>
                </router>
                <router className="org.mule.routing.outbound.FilteringOutboundRouter">
                    <global-endpoint name="waterMelonEndpoint"/>
                    <filter className="org.mule.routing.filters.logic.AndFilter">
                        <left-filter pattern="the quick brown (.*)" className="org.mule.routing.filters.RegExFilter"/>
                        <right-filter pattern="(.*) brown (.*)" className="org.mule.routing.filters.RegExFilter"/>
                    </filter>
                </router>
            </outbound-router -->

                <mule:default-component-exception-strategy/>
                <!-- exception-strategy className="org.mule.impl.DefaultExceptionStrategy"/ -->

            </mule:service>

            <mule:service name="propertyExtractorTestComponent">
                <mule:component class="org.mule.tck.testmodels.fruit.Apple"/>
                <mule:inbound-router/>
                <mule:outbound-router>
                    <mule:filtering-router>
                        <mxml:jxpath-property-extractor/>
                    </mule:filtering-router>
                </mule:outbound-router>
                <!-- outbound-router>
                <router className="org.mule.routing.outbound.FilteringOutboundRouter"
                        propertyExtractor="org.mule.util.properties.JXPathPropertyExtractor">
                </router>
            </outbound-router -->
            </mule:service>

            <mule:service name="propertyExtractorResponseRouterTestComponent">
                <mule:component class="org.mule.tck.testmodels.fruit.Apple"/>
                <mule:inbound-router/>
                <mule:response-router>
                    <!-- TODO -->
                    <!-- this should be predefined -->
                    <!-- TODO -->
                    <!-- propertyExtractor doesn't exist on the class.. should it? -->
                    <!-- mule:custom-response-router class="org.mule.routing.response.SingleResponseRouter"
                                    propertyExtractor="extractor"/ -->
                </mule:response-router>
                <!-- response-router>
                <router className="org.mule.routing.response.SingleResponseRouter"
                        propertyExtractor="org.mule.util.properties.JXPathPropertyExtractor"/>
            </response-router -->
            </mule:service>

        </mule:model>

    </mule:mule>

</beans>
