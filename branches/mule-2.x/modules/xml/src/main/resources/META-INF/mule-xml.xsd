<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesource.org/schema/mule/xml/2.2"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesource.org/schema/mule/core/2.2"
            xmlns:spring="http://www.springframework.org/schema/beans"
            targetNamespace="http://www.mulesource.org/schema/mule/xml/2.2"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"/>
    <xsd:import namespace="http://www.mulesource.org/schema/mule/core/2.2"
                schemaLocation="http://www.mulesource.org/schema/mule/core/2.2/mule.xsd"/>

    <!-- xml filters -->

    <xsd:element name="is-xml-filter" type="mule:abstractFilterType" substitutionGroup="mule:abstract-filter"/>

    <xsd:element name="jxpath-filter" type="jxpathFilterType" substitutionGroup="mule:abstract-filter"/>
    <xsd:complexType name="jxpathFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:patternFilterType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="context-property" type="spring:entryType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="lenient" type="mule:substitutableBoolean" default="true"/>
                <xsd:attribute name="expectedValue" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="jaxen-filter" type="jaxenFilterType" substitutionGroup="mule:abstract-filter"/>
    <xsd:complexType name="jaxenFilterType">
        <xsd:complexContent>
            <xsd:extension base="mule:patternFilterType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded"/>
                    <xsd:element name="context-property" type="spring:entryType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="expectedValue" type="xsd:string"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <!-- xml outbound routers -->

    <xsd:complexType name="messageSplitterType">
        <xsd:complexContent>
            <xsd:extension base="mule:messageSplitterOutboundRouterType">
                <!-- these appear after endpoints, which is ugly.  refactor? -->
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="splitExpression" type="xsd:string" use="required">
                    <xsd:annotation>
                        <xsd:documentation>The XPath expression used to split the message.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="externalSchemaLocation" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The location of a schema location that should be used to validate the current
                            message. This is not required if the message contains the location of the schema.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="validateSchema" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>Should schema validation be enabled when processing the XML message. Note
                            that this can have serious performance hit on high throughput systems.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="filter-based-splitter" type="filterBasedSplitterType"
                 substitutionGroup="mule:abstract-outbound-router"/>
    <xsd:complexType name="filterBasedSplitterType">
        <xsd:complexContent>
            <xsd:extension base="messageSplitterType">
                <xsd:attribute name="failIfNoMatch" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Should this router fail if none of the endpoint filters match the payload. The default is
                            true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="round-robin-splitter" type="roundRobinSplitterType"
                 substitutionGroup="mule:abstract-outbound-router"/>

    <xsd:complexType name="roundRobinSplitterType">
        <xsd:complexContent>
            <xsd:extension base="messageSplitterType">
                <xsd:attribute name="deterministic" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            If endpointFiltering is false and this option is true (the default)
                            then the first message part if routed to the first endpoint, the
                            second part to the second endpoint, etc, with the nth part going to
                            the (n modulo number of endpoints) endpoint.
                            If false then the messages will be distributed equally amongst all
                            endpoints.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- xml transformers -->
    <!-- these just appear at the top level, there's no extended group -->

    <xsd:complexType name="xmlTransformerType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="outputEncoding" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The encoding to use for the resulting XML/Text.</xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="dom-to-xml-transformer" type="xmlTransformerType" substitutionGroup="mule:abstract-transformer"/>
    <xsd:element name="dom-to-output-handler-transformer" type="xmlTransformerType"
                 substitutionGroup="mule:abstract-transformer"/>

    <xsd:element name="jxpath-extractor-transformer" type="jxpathExtractorType"
                 substitutionGroup="mule:abstract-transformer"/>
    <xsd:complexType name="jxpathExtractorType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:sequence>
                    <xsd:element name="namespace" type="namespaceType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
                <xsd:attribute name="expression" type="xsd:string"/>
                <xsd:attribute name="outputType" default="VALUE">
                    <xsd:annotation>
                        <xsd:documentation>
                          The type of output the extractor should use.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:NMTOKEN">
                            <xsd:enumeration value="VALUE"/>
                            <xsd:enumeration value="XML"/>
                            <xsd:enumeration value="NODE"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="singleResult" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                          Whether or not the extractor should return a list of results or a single result.
                          Defaults to true.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="object-to-xml-transformer" type="objectToXmlType" substitutionGroup="mule:abstract-transformer"/>
    <xsd:complexType name="objectToXmlType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="acceptUMOMessage" type="mule:substitutableBoolean"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="xml-to-dom-transformer" type="xmlTransformerType" substitutionGroup="mule:abstract-transformer"/>
    <xsd:element name="xml-to-object-transformer" type="mule:abstractTransformerType"
                 substitutionGroup="mule:abstract-transformer"/>

    <xsd:element name="xslt-transformer" type="xsltTransformerType" substitutionGroup="mule:abstract-transformer">
        <xsd:annotation>
            <xsd:documentation>A transformer used to perform XSLT transforms on the current message payload. Transform
                objects are pooled for better performance. Transform context properties can be set on the transformer,
                these can be pulled from the current message using Expression Evaluators. This works in a very similar
                way to the
                <a href="http://www.muleforge.org/display/EXTENDEDXML/XQuery" target="_blank">XQuery Transformer</a>
                on<a href="http://www.muleforge.org" target="_blank">MuleForge</a>.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>

    <xsd:complexType name="xsltTransformerType">
        <xsd:complexContent>
            <xsd:extension base="xmlTransformerType">
                <xsd:sequence>
                    <xsd:element name="xslt-text" maxOccurs="1" minOccurs="0" type="xsltTextType">
                        <xsd:annotation>
                            <xsd:documentation>The inline xslt script definition. This is not required if the xslt-file
                                attribute is set.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="context-property" type="spring:entryType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:annotation>
                            <xsd:documentation>A property that wil be made available to the transform context.
                                Expression Evaluators can be used to grab these properties from the message at runtime.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
                <xsd:attribute name="maxIdleTransformers" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>Transformers are pooled for better throughput since performing and XSL
                            transformation can be expensive. This controls how many instances will remain idle in the
                            transformer pool.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="maxActiveTransformers" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>The total number of xslt transforms that will get pooled at any given time.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="xsl-file" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The full path to the XSL template file to use when performing the transform.
                            This can be a path on the local file system or on the classpath. This attribute is not
                            required if the &lt;xslt-text&gt; element has been set.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="uriResolver" type="xsd:NMTOKEN">
                    <xsd:annotation>
                        <xsd:documentation>The URI resolver to use when validating the XSL output. If not set a default
                            one will be used that checks for resources on the local file system and classpath.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="transformerFactoryClass" type="xsd:NMTOKEN">
                    <xsd:annotation>
                        <xsd:documentation>he fully qualified class name of the
                            <i>javax.xml.TransformerFactory</i>
                            instance to use. If not specified the default JDK factory
                            <i>TransformerFactory.newInstance()</i>
                            will be used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="xsltTextType">
        <xsd:sequence maxOccurs="1" minOccurs="1">
            <xsd:any namespace="http://www.w3.org/1999/XSL/Transform" minOccurs="0" maxOccurs="1"
                     processContents="lax"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="xml-prettyprinter-transformer" type="xmlPrettyPrinterType"
                 substitutionGroup="mule:abstract-transformer">
                    <xsd:annotation>
                        <xsd:documentation>
                            Formats an XML string using the Pretty Printer functionality in {{org.dom4j.io.OutputFormat}}.
                        </xsd:documentation>
                    </xsd:annotation>
    </xsd:element>
    <xsd:complexType name="xmlPrettyPrinterType">
        <xsd:complexContent>
            <xsd:extension base="mule:abstractTransformerType">
                <xsd:attribute name="encoding" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The encoding format to use, such as UTF-8.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="expandEmptyElements" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to expand empty elements from &lt;tagName&gt; to &lt;tagName&gt;&lt;/tagName&gt;.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="indentEnabled" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to enable indenting of the XML code. If true, the indent string and size are used.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="indentString" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The string to use as the indent, usually an empty space.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="indentSize" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            The number of indent strings to use for each indent, such as "2" if indentString is set to an empty space and you want to use two empty spaces for each indent.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="lineSeparator" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The string to use for new lines, typically "\n".
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="newLineAfterNTags" type="mule:substitutableInt">
                    <xsd:annotation>
                        <xsd:documentation>
                            If the {{newlines}} attribute is true, the number of closing tags after which a newline separator is inserted. For example, setting this to "5" will cause a newline to be inserted after the output of five closing tags (including single tags). 
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="newlines" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether newlines should be printed. If false, the XML is printed all on one line. 
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="omitEncoding" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether the XML declaration line includes the encoding of the document. It is common to suppress this in protocols such as SOAP.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="padText" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to ensure that text immediately preceded by or followed by an element will be "padded" with a single space. This is useful when you set {{trimText}} to true and want to ensure that "the quick &lt;b&gt;brown&lt;/b&gt; fox" does not become "the quick&lt;b&gt;brown&lt;/b&gt;fox". 
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="suppressDeclaration" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to suppress the XML declaration line. It is common to suppress this in protocols such as SOAP.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="trimText" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to trim white space in the XML.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="XHTML" type="mule:substitutableBoolean">
                    <xsd:annotation>
                        <xsd:documentation>
                            Whether to use the XHTML standard, which is like HTML but passes an XML parser with real, closed tags, and outputs CDATA sections with CDATA delimiters.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- xml support -->

    <xsd:complexType name="namespaceType">
        <xsd:attribute name="prefix" type="xsd:string" use="required"/>
        <xsd:attribute name="uri" type="xsd:string" use="required"/>
    </xsd:complexType>

</xsd:schema>
