<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.mule</groupId>
        <artifactId>mule</artifactId>
        <version>2.1.0-M3-SNAPSHOT</version>
    </parent>
    <groupId>org.mule.distributions</groupId>
    <artifactId>osgi-libs</artifactId>
    <packaging>pom</packaging>
    <name>3rd-party libs repackaged for OSGi</name>

    <distributionManagement>
        <repository>
            <id>mule-libs</id>
            <name>3rd-party Libraries</name>
            <url>dav:https://dav.codehaus.org/mule/dependencies/maven2/</url>
        </repository>
    </distributionManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <configuration>
                    <!-- By default, the bundle-plugin does not put anything in the target directory, which  
                    means that osgi-libs cannot be built in the same step as the rest of the Mule build. -->
                    <unpackBundle>true</unpackBundle>
                    <!-- This would be nice to use but it creates cyclic dependencies in the OSGification POMs 
                    <classifier>osgi</classifier>
                    -->
                    <instructions>
                        <!-- Include all resources which are not java classes in the jar -->
                        <Private-Package>!org.*, !com.*, !net.*, !edu.*, !javax.*, !1.0*, *</Private-Package>
                        <!-- Negate Mule info. from parent POM because these libs are not ours -->
                        <Bundle-License/>
                        <Bundle-Description/>
                        <Bundle-Vendor/>
                        <Bundle-DocURL>&nbsp;</Bundle-DocURL>
                    </instructions>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>${eclipsePluginVersion}</version>
                <configuration>
                    <!-- 
                         Do not generate eclipse project files for the osgified libs.
                         Instead, we want the Mule projects to depend on the jars.
                    -->
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
        <!-- Don't pull in someone else's MANIFEST.MF file, we're going to generate it ourselves -->
        <resources>
            <resource>
                <directory>${project.basedir}</directory>
                <excludes>
                    <exclude>MANIFEST.MF</exclude>
                    <exclude>INDEX.LIST</exclude>
                </excludes>
            </resource>
        </resources>
    </build>

    <modules>
        <module>acegi</module>
        <module>activation</module>
        <module>ant</module>
        <!-- <module>antlr</module> -->
        <!-- <module>asm</module> -->
        <module>axis</module> 
        <!-- <module>backport</module> -->
        <module>cglib</module>
        <!-- <module>commons-beanutils</module> -->
        <module>commons-cli</module>
        <!-- <module>commons-codec</module> -->
        <!-- <module>commons-collections</module> -->
        <module>commons-dbutils</module>
        <module>commons-discovery</module>
        <module>commons-httpclient</module>
        <module>commons-io</module>
        <module>commons-jxpath</module>
        <!-- <module>commons-lang</module> -->
        <!-- <module>commons-net</module> -->
        <module>cryptix</module>
        <module>cxf</module>
        <module>cxf-http</module>
        <!-- <module>dom4j</module> -->
        <module>geronimo-ejb</module>
        <module>geronimo-j2ee-connector</module>
        <module>geronimo-j2ee-management</module>
        <module>geronimo-jaxrpc</module>
        <module>geronimo-jms</module>
        <module>geronimo-jta</module>
        <!-- <module>geronimo-servlet</module> -->
        <module>groovy-engine</module>
        <module>hibernate</module>
        <module>javassist</module>
        <module>jaxb</module>
        <!-- <module>jaxen</module> -->
        <module>jaxws</module>
        <module>jcr</module>
        <module>jbossts</module>
        <module>jbpm</module>
        <!-- JDOM is tricky because it has a few classes in the "." package, 
             so we use someone else's OSGification of it
        <module>jdom</module> -->
        <module>jug</module>
        <module>mail</module>
        <module>mx4j</module>
        <module>opensaml</module>
        <!-- <module>ognl</module> -->
        <!-- <module>oro</module> -->
        <!-- <module>quartz</module> -->
        <!-- <module>saaj</module> -->
        <module>saxon</module>
        <module>script</module>
        <module>smack</module>
        <module>smjbpm</module>
        <module>staxutils</module>
        <module>sxc</module>
        <module>woodstox</module>
        <module>wrapper</module>
        <module>wsdl</module>       
        <module>xml-resolver</module>
        <module>xml-security</module>
        <!-- <module>xmlpull</module> -->
        <!-- <module>xstream</module>  -->       
        <module>yourkit</module>
        <module>xapool</module>
        <module>wss4j</module>
    </modules>
</project>

