<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mule="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:scripting="http://www.mulesource.org/schema/mule/scripting/2.0"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
       http://www.mulesource.org/schema/mule/scripting/2.0 http://www.mulesource.org/schema/mule/scripting/2.0/mule-scripting.xsd">

    <description>
        This example demonstrates invoking a Groovy script as the service component.
    </description>
    
    <scripting:script name="scriptText">
        def msg = eventContext.transformedMessageAsString
        log.boilerPlate("Message Received: ${msg} - class: ${msg.class.name}")
        return ["Hello", ":-)"];
    </scripting:script>
    
    <mule:model name="main">
        <mule:service name="ScriptService">
            <mule:component class="org.mule.components.script.jsr223.ScriptComponent">
                <mule:properties>
                    <entry key="scriptEngineName" value="groovy"/>
                    <entry key="scriptText" value-ref="scriptText"/>
                </mule:properties>
            </mule:component>
            <mule:inbound-router>
                <mule:endpoint address="vm://scripting"/>
            </mule:inbound-router>
        </mule:service>
    </mule:model>
</beans>
