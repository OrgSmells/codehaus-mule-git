<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:mule="http://www.mulesource.org/schema/mule/core/2.0"
    xmlns:bpm="http://www.mulesource.org/schema/mule/bpm/2.0"
    xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.0"
    xmlns:jms="http://www.mulesource.org/schema/mule/jms/2.0"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
       http://www.mulesource.org/schema/mule/bpm/2.0 http://www.mulesource.org/schema/mule/bpm/2.0/mule-bpm.xsd
       http://www.mulesource.org/schema/mule/vm/2.0 http://www.mulesource.org/schema/mule/vm/2.0/mule-vm.xsd
       http://www.mulesource.org/schema/mule/jms/2.0 http://www.mulesource.org/schema/mule/jms/2.0/mule-jms.xsd">

    <bpm:connector name="jBpmConnector" bpms-ref="jbpm" />

    <vm:connector name="syncVm" />

    <vm:connector name="asyncVm" queueEvents="true" />

    <!-- We could use JMS instead of VM to make the example more realistic.
        <jms:activemq-connector name="jmsConnector" />
    -->

    <!-- The Loan Broker is driven by a Process Engine -->
    <mule:endpoint name="ProcessEngine" address="bpm://LoanBroker" />

    <!-- Customer loan requests to the Loan Broker -->
    <mule:endpoint name="CustomerRequests" address="vm://customer.requests" connector-ref="syncVm" />
    <!-- Requests to the credit agency -->
    <mule:endpoint name="CreditAgency" address="vm://credit.agency" connector-ref="syncVm" />
    <!-- Customer credit profiles from the credit agency -->
    <mule:endpoint name="CreditProfiles" address="vm://credit.profiles" connector-ref="syncVm" />
    <!-- Final loan quote to the customer -->
    <mule:endpoint name="CustomerResponses" address="vm://customer.responses" connector-ref="asyncVm" />
    <!-- Bigger banks handle bigger loans.  -->
    <mule:endpoint name="BigBank" address="vm://big.bank" connector-ref="syncVm" />
    <mule:endpoint name="MediumBank" address="vm://medium.bank" connector-ref="syncVm" />
    <mule:endpoint name="SmallBank" address="vm://small.bank" connector-ref="syncVm" />

    <mule:model-seda name="loan-broker">

        <!-- ***************************************************
            Process Engine
            *************************************************** -->

        <!-- Messages sent to the process engine -->
        <mule:service name="ToBPMS">
            <mule:component class="org.mule.examples.loanbroker.DefaultLoanBroker" />
            <mule:inbound-router>
                <!-- Incoming message = CustomerRequest -->
                <mule:endpoint ref="CustomerRequests" />
                <!-- Incoming message = CreditProfile -->
                <mule:endpoint ref="CreditProfiles" />
            </mule:inbound-router>
            <mule:outbound-router>
                <mule:filtering-router>
                    <mule:endpoint ref="ProcessEngine" synchronous="false" />
                </mule:filtering-router>
            </mule:outbound-router>
        </mule:service>

        <!-- Messages generated from the process engine -->
        <mule:service name="FromBPMS">
            <mule:component class="org.mule.examples.loanbroker.DefaultLoanBroker" />
            <mule:inbound-router>
                <mule:endpoint ref="ProcessEngine" />
            </mule:inbound-router>
            <mule:outbound-router>
                <mule:endpoint-selector-router selectorProperty="endpoint">
                    <!-- Outgoing message = Customer -->
                    <mule:endpoint ref="CreditAgency" />

                    <!-- Outgoing message = LoanQuote -->
                    <mule:endpoint ref="CustomerResponses" />

                    <!-- Outgoing message = LoanQuoteRequest -->
                    <mule:endpoint ref="BigBank" synchronous="true">
                        <mule:properties>
                            <entry key="method" value="getLoanQuote" />
                        </mule:properties>
                    </mule:endpoint>
                    <mule:endpoint ref="MediumBank" synchronous="true">
                        <mule:properties>
                            <entry key="method" value="getLoanQuote" />
                        </mule:properties>
                    </mule:endpoint>
                    <mule:endpoint ref="SmallBank" synchronous="true">
                        <mule:properties>
                            <entry key="method" value="getLoanQuote" />
                        </mule:properties>
                    </mule:endpoint>
                </mule:endpoint-selector-router>
            </mule:outbound-router>
        </mule:service>


        <!-- ***************************************************
            Services
            *************************************************** -->
        <!-- The credit agency service will get the credit profile for a customer -->
        <mule:service name="ACreditAgency">
            <mule:component class="org.mule.examples.loanbroker.credit.DefaultCreditAgency" />
            <mule:inbound-router>
                <mule:endpoint ref="CreditAgency" />
            </mule:inbound-router>
            <mule:outbound-router>
                <mule:filtering-router>
                    <mule:endpoint ref="CreditProfiles" />
                </mule:filtering-router>
            </mule:outbound-router>
        </mule:service>

        <!-- These are mock bank services that represent remote bank loan services -->
        <mule:service name="ABigBank">
            <mule:component class="org.mule.examples.loanbroker.bank.Bank" />
            <mule:inbound-router>
                <mule:endpoint ref="BigBank" />
            </mule:inbound-router>
        </mule:service>
        <mule:service name="AMediumBank" implementation="org.mule.examples.loanbroker.bank.Bank">
            <mule:component class="org.mule.examples.loanbroker.bank.Bank" />
            <mule:inbound-router>
                <mule:endpoint ref="MediumBank" />
            </mule:inbound-router>
        </mule:service>
        <mule:service name="ASmallBank" implementation="org.mule.examples.loanbroker.bank.Bank">
            <mule:component class="org.mule.examples.loanbroker.bank.Bank" />
            <mule:inbound-router>
                <mule:endpoint ref="SmallBank" />
            </mule:inbound-router>
        </mule:service>
    </mule:model-seda>

    <!-- ***************************************************
        BPMS Configuration
        *************************************************** -->
    <!-- BPMS object for Mule's BPM Connector -->
    <bean id="jbpm" class="org.mule.providers.bpm.jbpm.Jbpm" destroy-method="destroy">
        <property name="jbpmConfiguration">
            <ref local="jbpmConfig" />
        </property>
    </bean>

    <!-- jBPM Configuration -->
    <bean id="jbpmConfig"
        class="org.springmodules.workflow.jbpm31.LocalJbpmConfigurationFactoryBeanWorkaround">
        <property name="sessionFactory">
            <ref local="jbpmSessionFactory" />
        </property>
        <property name="configuration">
            <value>jbpm.cfg.xml</value>
        </property>
        <property name="processDefinitions">
            <list>
                <bean id="loanBroker"
                    class="org.springmodules.workflow.jbpm31.definition.ProcessDefinitionFactoryBean">
                    <property name="definitionLocation">
                        <value>loan-broker-process.xml</value>
                    </property>
                </bean>
            </list>
        </property>
        <property name="createSchema">
            <value>false</value>
        </property>
    </bean>


    <!-- JBPM Hibernate SessionFactory -->
    <bean id="jbpmSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource">
            <ref local="jbpmDataSource" />
        </property>
        <property name="mappingLocations">
            <value>classpath*:/org/jbpm/**/*.hbm.xml</value>
        </property>
        <property name="typeDefinitions">
            <ref local="jbpmTypes" />
        </property>
        <property name="hibernateProperties">
            <props>
                <!-- These properties may depend on your database -->
                <prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
                <prop key="hibernate.query.substitutions">true 1, false 0</prop>
                <prop key="hibernate.jdbc.batch_size">0</prop>
                <!-- Create/update the database tables automatically when the JVM starts up -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- EhCache is no longer the default cache provider as of Hibernate 3.2
                    Refer to http://www.hibernate.org/hib_docs/v3/reference/en/html/performance.html
                    for Hibernate's different cache providers. -->
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
                <!-- C3P0 (connection pooling) properties -->
                <prop key="hibernate.c3p0.min_size">1</prop>
                <prop key="hibernate.c3p0.max_size">3</prop>
                <!-- Write SQL statements to log -->
                <prop key="hibernate.show_sql">false</prop>
            </props>
        </property>
    </bean>

    <!-- JBPM Datasource -->
    <bean id="jbpmDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>org.hsqldb.jdbcDriver</value>
        </property>
        <property name="url">
            <value>jdbc:hsqldb:mem:.;sql.enforce_strict_size=true</value>
        </property>
        <property name="username">
            <value>sa</value>
        </property>
        <property name="password">
            <value></value>
        </property>
    </bean>

    <!-- JBPM data types -->
    <bean id="jbpmTypes" class="org.springframework.orm.hibernate3.TypeDefinitionBean">
        <property name="typeName">
            <value>string_max</value>
        </property>
        <property name="typeClass">
            <value>org.jbpm.db.hibernate.StringMax</value>
        </property>
    </bean>

</beans>