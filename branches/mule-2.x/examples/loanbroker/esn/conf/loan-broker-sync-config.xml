<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mule="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.0"
       xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
               http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
               http://www.mulesource.org/schema/mule/vm/2.0 http://www.mulesource.org/schema/mule/vm/2.0/mule-vm.xsd">

    <description>
    This loan broker example is modeled on the Enterprise integration Patterns book sample.
    This implementation differs in that this configuration uses a synchronous model where
    each component is invoked from the LoanBroker component.
    </description>

    <!-- Synchronous VM connector (messages are processed in the same execution thread) -->
    <vm:connector name="syncVm">
        <!-- TODO - old config had queueEvents="true" disabled, with a comment indicating
             that it caused the config to lock -->
        <!-- TODO doThreading=false temporary fixes the race condition on dispatch.
             Need to dig in DefaultMessageAdapter's propertyNames iterator, which is
             a view over a concurrent map, and thus tolerates changes, but breaks us. -->
        <mule:dispatcher-threading-profile doThreading="false"/>
    </vm:connector>

    <!--
       The Mule model initialises and manages your UMO components
    -->
    <mule:model-seda name="loan-broker">

        <!--
        The loan broker is used to receive loan requests
        -->
        <mule:service name="LoanBroker">
            <mule:component class="org.mule.examples.loanbroker.esn.SynchronousLoanBroker"/>

            <mule:inbound-router>
                <mule:endpoint-ref nameref="CustomerRequests"/>
            </mule:inbound-router>

            <mule:nested-router>
                <mule:binding interface="org.mule.examples.loanbroker.credit.CreditAgencyService">
                    <mule:endpoint-ref nameref="CreditAgency"/>
                </mule:binding>
            </mule:nested-router>

            <mule:outbound-router>
                <!-- couldn't this be pass-through? -->
                <mule:filtering-router>
                    <mule:endpoint-ref nameref="LenderService"/>
                </mule:filtering-router>
            </mule:outbound-router>

            <mule:response-router timeout="10000">
                <mule:custom-router class="org.mule.examples.loanbroker.routers.BankQuotesResponseAggregator"/>
                <mule:endpoint-ref nameref="LoanBrokerQuotes"/>
            </mule:response-router>
        </mule:service>

        <!--
        The credit agency service will get the credit profile for a customer
        -->
        <mule:service name="CreditAgencyService">
            <mule:component class="org.mule.examples.loanbroker.credit.DefaultCreditAgency"/>
            <mule:inbound-router>
                <mule:endpoint-ref nameref="CreditAgencyIn"/>
            </mule:inbound-router>
        </mule:service>

        <!--
        The Lender service is used to determine which banks to contact for a quote
        -->
        <mule:service name="LenderService">
            <mule:component class="org.mule.examples.loanbroker.lender.DefaultLender"/>
            <mule:inbound-router>
                <mule:endpoint-ref nameref="LenderService"/>
            </mule:inbound-router>
            <mule:outbound-router>
                <!-- again, could be pass-through? -->
                <mule:filtering-router>
                    <mule:endpoint-ref nameref="BankGateway" transformers="SetLendersAsRecipients"/>
                </mule:filtering-router>
            </mule:outbound-router>
        </mule:service>

        <mule:service name="BankGateway">
            <mule:component class="org.mule.components.simple.BridgeComponent"/>
            <mule:inbound-router>
                <mule:endpoint-ref nameref="BankGateway"/>
            </mule:inbound-router>
            <mule:outbound-router>
                <mule:logging-catch-all-strategy/>
                <mule:custom-router class="org.mule.routing.outbound.StaticRecipientList">
                    <mule:reply-to address="LoanBrokerQuotes"/>
                    <mule:message-property-filter pattern="recipients!=null"/>
                </mule:custom-router>
            </mule:outbound-router>
        </mule:service>

        <!--
        These are mock bank services that represent remote bank loan services
        One or more of these are selected by the LenderService and a request
        is routed to them.   The lenderService outbound router also defines a
        replyTo property which will be used by Mule to route the responses back
        to the LoanBrokerQuotes destination
        -->
        <mule:service name="Bank1">
            <mule:component class="org.mule.examples.loanbroker.bank.Bank"/>
            <mule:inbound-router>
                <mule:endpoint-ref nameref="Bank1In"/>
            </mule:inbound-router>
        </mule:service>

        <mule:service name="Bank2">
            <mule:component class="org.mule.examples.loanbroker.bank.Bank"/>
            <mule:inbound-router>
                <mule:endpoint-ref nameref="Bank2In"/>
            </mule:inbound-router>
        </mule:service>

        <mule:service name="Bank3">
            <mule:component class="org.mule.examples.loanbroker.bank.Bank"/>
            <mule:inbound-router>
                <mule:endpoint-ref nameref="Bank3In"/>
            </mule:inbound-router>
        </mule:service>

        <mule:service name="Bank4">
            <mule:component class="org.mule.examples.loanbroker.bank.Bank"/>
            <mule:inbound-router>
                <mule:endpoint-ref nameref="Bank4In"/>
            </mule:inbound-router>
        </mule:service>

        <mule:service name="Bank5">
            <mule:component class="org.mule.examples.loanbroker.bank.Bank"/>
            <mule:inbound-router>
                <mule:endpoint-ref nameref="Bank5In"/>
            </mule:inbound-router>
        </mule:service>

    </mule:model-seda>
</beans>
