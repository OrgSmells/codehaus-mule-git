<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.0"
       xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
               http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
               http://www.mulesource.org/schema/mule/vm/2.0 http://www.mulesource.org/schema/mule/vm/2.0/mule-vm.xsd">

    <description>
    This loan broker example is modeled on the Enterprise integration Patterns book sample.  
    This implementation differs in that this configuration uses an asynchronous model where 
    each component communicates messaging according to its configuration in this file.
    </description>

    <!--<configuration serverId="loanbroker">-->
        <!--<default-threading-profile maxThreadsActive="1" maxThreadsIdle="1" maxBufferSize="0"/>-->
    <!--</configuration>-->

    <!-- Synchronous VM connector (messages are processed in the same execution thread) -->
    <vm:connector name="syncVm"/>

    <!-- Asynchronous VM connector (uses in-memory queues) -->
    <vm:connector name="asyncVm" queueEvents="true"/>

    <!-- only used for the async loan broker to send the lowest quote back to the customer -->
    <vm:endpoint name="CustomerResponses" path="customer.responses" connector-ref="asyncVm"/>

    <!--
       The Mule model initialises and manages your UMO components
    -->
    <model name="loan-broker">

        <!--
        The loan broker is used to receive loan requests
        -->
        <service name="TheLoanBroker">
            <component class="org.mule.examples.loanbroker.AsynchronousLoanBroker"/>
            <!--
            This router uses the BankQuoteAggregator for events of type BankQuote, for all other
            types the catch all strategy is invoked, which simply passes the event to the component
            -->
            <inbound-router>
                <custom-catch-all-strategy class="org.mule.routing.ComponentCatchAllStrategy"/>
                <!-- New requests from customers -->
                <inbound-endpoint ref="CustomerRequests"/>
                <!-- Loan quotes from banks -->
                <inbound-endpoint ref="LoanBrokerQuotes"/>
                <custom-inbound-router class="org.mule.examples.loanbroker.routers.BankQuotesInboundAggregator">
                    <payload-type-filter expectedType="org.mule.examples.loanbroker.messages.LoanQuote"/>
                </custom-inbound-router>
            </inbound-router>

            <outbound-router>
                <!-- Credit profile requests -->
                <filtering-router>
                    <outbound-endpoint ref="CreditAgency" transformer-refs="ExtractCustomer"/>
                    <payload-type-filter expectedType="org.mule.examples.loanbroker.messages.Customer"/>
                </filtering-router>
                <!-- Quote requests to the banks -->
                <filtering-router>
                    <outbound-endpoint ref="LenderService"/>
                    <payload-type-filter expectedType="org.mule.examples.loanbroker.messages.LoanBrokerQuoteRequest"/>
                </filtering-router>
                <!-- Final quote response to the customer -->
                <filtering-router>
                    <outbound-endpoint ref="CustomerResponses"/>
                    <payload-type-filter expectedType="org.mule.examples.loanbroker.messages.LoanQuote"/>
                </filtering-router>
            </outbound-router>
        </service>

        <!--
        The credit agency service will get the credit profile for a customer
        -->
        <service name="TheCreditAgencyService">
            <component class="org.mule.examples.loanbroker.credit.DefaultCreditAgency"/>
            <inbound-router>
                <inbound-endpoint ref="CreditAgency"/>
            </inbound-router>
        </service>

        <!--
        The Lender service is used to determine which banks to contact for a quote
        -->
        <service name="TheLenderService">
            <component class="org.mule.examples.loanbroker.lender.DefaultLender"/>
            <inbound-router>
                <inbound-endpoint ref="LenderService"/>
            </inbound-router>
            <outbound-router>
                <filtering-router>
                    <outbound-endpoint ref="BankGateway" transformer-refs="SetLendersAsRecipients"/>
                </filtering-router>
            </outbound-router>
        </service>

        <bridge-service name="TheBankGateway">
            <inbound-endpoint ref="BankGateway"/>
            <outbound-router>
                <logging-catch-all-strategy/>
                <custom-outbound-router class="org.mule.routing.outbound.StaticRecipientList">
                    <reply-to address="LoanBrokerQuotes"/>
                    <message-property-filter pattern="recipients!=null"/>
                </custom-outbound-router>
            </outbound-router>
        </bridge-service>

        <!--
        These are mock bank services that represent remote bank loan services
        One or more of these are selected by the LenderService and a request
        is routed to them.   The lenderService outbound router also defines a
        replyTo property which will be used by Mule to route the responses back
        to the LoanBrokerQuotes destination
        -->
        <service name="TheBank1">
            <component class="org.mule.examples.loanbroker.bank.Bank"/>
            <inbound-router>
                <inbound-endpoint ref="Bank1In"/>
            </inbound-router>
        </service>

        <service name="TheBank2">
            <component class="org.mule.examples.loanbroker.bank.Bank"/>
            <inbound-router>
                <inbound-endpoint ref="Bank2In"/>
            </inbound-router>
        </service>

        <service name="TheBank3">
            <component class="org.mule.examples.loanbroker.bank.Bank"/>
            <inbound-router>
                <inbound-endpoint ref="Bank3In"/>
            </inbound-router>
        </service>

        <service name="TheBank4">
            <component class="org.mule.examples.loanbroker.bank.Bank"/>
            <inbound-router>
                <inbound-endpoint ref="Bank4In"/>
            </inbound-router>
        </service>

        <service name="TheBank5">
            <component class="org.mule.examples.loanbroker.bank.Bank"/>
            <inbound-router>
                <inbound-endpoint ref="Bank5In"/>
            </inbound-router>
        </service>

    </model>
</mule>
