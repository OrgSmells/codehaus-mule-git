<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:http="http://www.mulesource.org/schema/mule/http/2.0"
       xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.0"
       xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
               http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
               http://www.mulesource.org/schema/mule/stdio/2.0 http://www.mulesource.org/schema/mule/stdio/2.0/mule-stdio.xsd
               http://www.mulesource.org/schema/mule/vm/2.0 http://www.mulesource.org/schema/mule/vm/2.0/mule-vm.xsd">

    <description>
    This configuration is identical to the other Hello World example, except that instead of using the console 
    for I/O, other methods are used.  The example demonstrates how easy it is to swap out different transports 
    while never affecting the application.
    </description>

    <!--
    To invoke the Hello service over HTTP, hit the following URL in your browser:

        http://localhost:8888?name=Ross 

    To invoke the Hello service via a Servlet, submit a web form such as:

        <form method="POST" action="/mule-examples/rest?endpoint=greeter">
            <input type="text" name="payload"/>
            <input type="submit" value="POST" />
        </form>
    
    To invoke the Hello service programatically, use the MuleClient:
                    
        MuleClient client = new MuleClient();
        client.send("vm://greeter", "Ross", null);
        UMOMessage response = client.send("vm://greeter", "Ross", null);
        System.out.println("response = " + response.getPayload());
    -->
    
    <!--
        All transformers must be defined here.  For this example we have two transformers
        used to transform the inbound events for the Greeter and Chatter components into
        objects they understand.  The entryPointResolver configured on the Model below will
        determine which method to call on our components based on the return types of these
        transformers.
    -->
    <custom-transformer class="org.mule.samples.hello.StringToNameString"
        name="StringToNameString" returnClass="org.mule.samples.hello.NameString"/>
    <custom-transformer class="org.mule.samples.hello.NameStringToChatString"
        name="NameStringToChatString" returnClass="org.mule.samples.hello.ChatString"/>
    <custom-transformer class="org.mule.samples.hello.ChatStringToString"
        name="ChatStringToString" returnClass="java.lang.String"/>
    <custom-transformer class="org.mule.samples.hello.HttpRequestToString"
        name="HttpRequestToString" returnClass="java.lang.String"/>

    <!--
        An interceptor is a piece of code that can be configued to execute
        before and/or after an event is received for a component.
        You can define a stack of interceptors that will be executed in sequence.
        You can then configure the stack on your components.
    -->
    <!--<interceptor-stack name="default">-->
        <!--<interceptor className="org.mule.interceptors.LoggingInterceptor"/>-->
        <!--<interceptor className="org.mule.interceptors.TimerInterceptor"/>-->
    <!--</interceptor-stack>-->

    <!--
        The Mule model initialises and manages your UMO components
    -->
    <model name="helloSample">
        <!--
            This component receives input from 3 different endpoints (http, servlet, vm) and routes
            them all to the same place.
        -->
        <service name="GreetUMO">
            <component class="org.mule.samples.hello.Greeter"/>
            <inbound-router>
                <!-- Incoming HTTP requests -->
                <inbound-endpoint address="http://localhost:8888" 
                    transformers="HttpRequestToString StringToNameString"
                    synchronous="true">
                    <not-filter>
                        <wildcard-filter pattern="/favicon.ico"/>   
                    </not-filter>
                </inbound-endpoint>
                <!-- Incoming Servlet requests -->
                <inbound-endpoint address="servlet://rest" 
                    transformers="StringToNameString"
                    synchronous="true"/>
                <!-- Incoming VM requests -->
                <inbound-endpoint address="vm://greeter" 
                    transformers="StringToNameString"
                    synchronous="true"/>
            </inbound-router>
            <outbound-router>
                <outbound-pass-through-router>
                    <outbound-endpoint address="vm://chitchatter"
                        synchronous="true"/>
                </outbound-pass-through-router>
            </outbound-router>
            <!--
            Here we tell this component to use the interceptor stack defined above
            -->
            <!--<interceptor name="default"/>-->
        </service>
        <service name="ChitChatUMO">
            <component class="org.mule.samples.hello.ChitChatter"/>
            <inbound-router>
                <!-- note the response transformer on this component. even though there is no outbound provider
                     the transformer will transform the result event and pass it back as the http response -->
                <inbound-endpoint address="vm://chitchatter" transformers="NameStringToChatString"
                               synchronous="true"
                               responseTransformers="ChatStringToString"/>
            </inbound-router>
            <!--<interceptor name="default"/>-->
        </service>
    </model>

</mule>
