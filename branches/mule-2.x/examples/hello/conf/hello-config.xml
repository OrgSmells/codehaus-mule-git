<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mule="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:stdio="http://www.mulesource.org/schema/mule/stdio/2.0"
       xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.0"
       xsi:schemaLocation="
               http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
               http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
               http://www.mulesource.org/schema/mule/stdio/2.0 http://www.mulesource.org/schema/mule/stdio/2.0/mule-stdio.xsd
               http://www.mulesource.org/schema/mule/vm/2.0 http://www.mulesource.org/schema/mule/vm/2.0/mule-vm.xsd">

    <description>
    The hello sample application has two components -
    1. The Greeter component that adds a greeting to the event it receives
    2. The ChitChater component that adds some additional conversation to the event it receives
    An event is triggered by input through the system console and the outbound event is
    aslo written out through the system console.
    </description>

    <!--
        The system stream connector is used to send and receive information via the
        System.in and System.out. Note this connector is only really useful for testing
        purposes.
        promptMessage - is what is written to the console
        messageDelayTime - is the time in milliseconds before the user is prompted again.
        These properties are set as bean properties on the connector.
    -->
    <stdio:connector name="SystemStreamConnector"
        promptMessageCode="3"
        resourceBundle="messages.hello-example-messages"
        messageDelayTime="1000"/>

    <!--
        All transformers must be defined here.  For this example we have two transformers
        used to transform the inbound events for the Greeter and Chatter components into
        objects they understand.  The entryPointResolver configured on the Model below will
        determine which method to call on our components based on the return types of these
        transformers.
    -->
    <mule:custom-transformer class="org.mule.samples.hello.StringToNameString"
        name="StringToNameString" returnClass="org.mule.samples.hello.NameString"/>
    <mule:custom-transformer class="org.mule.samples.hello.NameStringToChatString"
        name="NameStringToChatString" returnClass="org.mule.samples.hello.ChatString"/>
    <mule:custom-transformer class="org.mule.samples.hello.ChatStringToString"
        name="ChatStringToString" returnClass="java.lang.String"/>

    <!--
        An interceptor is a piece of code that can be configued to execute
        before and/or after an event is received for a component.
        You can define a stack of interceptors that will be executed in sequence.
        You can then configure the stack on your components.
    -->
    <!--<interceptor-stack name="default">-->
        <!--<interceptor className="org.mule.interceptors.LoggingInterceptor"/>-->
        <!--<interceptor className="org.mule.interceptors.TimerInterceptor"/>-->
    <!--</interceptor-stack>-->

    <!--
        The Mule model initialises and manages your UMO components
    -->
    <mule:model name="helloSample">
        <!--
            A Mule descriptor defines all the necessary information about how your components will
            interact with the framework, other components in the system and external sources.
            Please refer to the Configuration Guide for a full description of all the parameters.
        -->
        <mule:service name="GreetUMO">
            <mule:component class="org.mule.samples.hello.Greeter"/>
            <mule:inbound-router>
                <mule:endpoint address="stdio://System.in" transformers="StringToNameString"/>
            </mule:inbound-router>
            <mule:outbound-router>
                <mule:outbound-pass-through-router>
                    <mule:endpoint address="vm://chitchatter"/>
                </mule:outbound-pass-through-router>
            </mule:outbound-router>
            <!--
            Here we tell this component to use the interceptor stack defined above
            -->
            <!--<interceptor name="default"/>-->
        </mule:service>
        <mule:service name="ChitChatUMO">
            <mule:component class="org.mule.samples.hello.ChitChatter"/>
            <mule:inbound-router>
                <mule:endpoint address="vm://chitchatter" transformers="NameStringToChatString"/>
            </mule:inbound-router>
            <mule:outbound-router>
                <mule:outbound-pass-through-router>
                    <mule:endpoint address="stdio://System.out" transformers="ChatStringToString"/>
                </mule:outbound-pass-through-router>
            </mule:outbound-router>
            <!--<interceptor name="default"/>-->
        </mule:service>
    </mule:model>

</beans>
        