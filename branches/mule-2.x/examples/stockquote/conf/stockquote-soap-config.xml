<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.0"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:http="http://www.mulesource.org/schema/mule/http/2.0"
       xmlns:stdio="http://www.mulesource.org/schema/mule/stdio/2.0"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
       http://www.mulesource.org/schema/mule/http/2.0 http://www.mulesource.org/schema/mule/http/2.0/mule-http.xsd
       http://www.mulesource.org/schema/mule/stdio/2.0 http://www.mulesource.org/schema/mule/stdio/2.0/mule-stdio.xsd">

    <description>
        The StockQuote SOAP example uses the Mule RestServiceWrapper to invoke a remote .Net service
        Using SOAP RPC style invocation and displays the result.
        The example demostrates how to set named parameters for Web Service invocations and how to
        invoke a non-java web service using Mule.

        The example invokes a StockQuote Web Service on www.webservicesx.com, the result is an Xml
        string that Mule converts to a StockQuote object by first running the result through an
        Xslt transformer and then using the XmlToObject transformer.
    </description>

    <spring:bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <spring:property name="locations">
            <spring:list>
                <spring:value>proxy.properties</spring:value>
            </spring:list>
        </spring:property>
    </spring:bean>

    <stdio:connector name="SystemStreamConnector"
                     promptMessageCode="2"
                     resourceBundle="messages.stockquote-example-messages"
                     messageDelayTime="1000"/>

    <!-- proxyPort cannot be substituted here - see MULE-1887 -->
    <http:connector name="HttpConnector"
                    proxyHostname="${proxyHostname}"
                    proxyPassword="${proxyPassword}"
                    proxyPort="${proxyPort}"
                    proxyUsername="${proxyUsername}"/>

    <custom-transformer name="XmlToObject" class="org.mule.transformers.xml.XmlToObject"/>
    <transformer-xml-entity-decoder name="XmlDecoder"/>
    <custom-transformer name="Xslt" class="org.mule.transformers.xml.XsltTransformer">
        <spring:property name="xslFile" value="xsl/soap-stock.xsl"/>
    </custom-transformer>

    <!--
        The Mule model initialises and manages your UMO components
    -->
    <model name="Sample-SOAP">
        <service name="Console I/O">
            <component class="org.mule.components.simple.BridgeComponent"/>
            <inbound-router>
                <inbound-endpoint address="stdio://System.in"/>
            </inbound-router>
            <outbound-router>
                <!--
                    We use a chaining router to send the results of one endpoint execution as the
                    input for the next endpoint. In this case it writes it out to System.out
                -->
                <chaining-router>
                    <outbound-endpoint address="vm://stockquote"/>
                    <outbound-endpoint address="stdio://System.out"/>
                </chaining-router>
            </outbound-router>
        </service>

        <!--
            This component can proxy external web service calls over Jms, tcp, ssl or any other transport.
            For this example we use Vm.
        -->
        <service name="serviceProxy">
            <component class="org.mule.components.simple.BridgeComponent"/>
            <inbound-router>
                <inbound-endpoint address="vm://stockquote"/>
            </inbound-router>
            <outbound-router>
                <outbound-pass-through-router>
                    <outbound-endpoint address="axis:http://www.webservicex.net/stockquote.asmx?method=GetQuote"
                                       responseTransformer-ref="XmlDecoder Xslt XmlToObject">
                        <properties>
                            <spring:entry key="soapAction" value="[methodNamespace][method]"/>
                            <spring:entry key="soapMethods">
                                <spring:map>
                                    <spring:entry key="qname{GetQuote:http://www.webserviceX.NET/}">
                                        <spring:list>
                                            <spring:value>symbol;string;in</spring:value>
                                            <spring:value>GetQuoteResult;string;out</spring:value>
                                        </spring:list>
                                    </spring:entry>
                                </spring:map>
                            </spring:entry>
                        </properties>
                    </outbound-endpoint>
                </outbound-pass-through-router>
            </outbound-router>
        </service>
    </model>
</mule>
