package com.example.service.${serviceName.toLowerCase()};

import com.example.exception.ConcurrencyException;
import com.example.service.${serviceName.toLowerCase()}.criteria.${serviceName}SearchCriteria;
import com.example.service.${serviceName.toLowerCase()}.exceptions.${serviceName}ServiceException;
import com.example.service.${serviceName.toLowerCase()}.documentcode.${serviceName}Code;
import com.example.service.${serviceName.toLowerCase()}.dto.${serviceName}DTO;

import java.rmi.RemoteException;
import java.util.List;

/**
 * Represents a ${serviceName}Service interface.
 *
 */
public interface ${serviceName}Service {
    /**
     * Creates a new ${serviceName} entity using given DTO as a template.
     *
     * @param dto a data transfter object that will be used as a template
     *            for creating a new ${serviceName}.
     * @return a business key of new ${serviceName}
     * @throws ${serviceName}ServiceException if any service tier exception occures
     * @throws RemoteException               if a remote exception occures
     */
    public ${serviceName}Code create${serviceName}(${serviceName}DTO dto)
            throws ${serviceName}ServiceException, ConcurrencyException, RemoteException;

    /**
     * Retrieves a ${serviceName} by a specified ${serviceName} Code.
     *
     * @param code ${serviceName} Code
     * @return DTO that represents a Delivery Order
     * @throws ${serviceName}ServiceException if any service tier exception occures
     * @throws RemoteException               if a remote exception occures
     */
    public ${serviceName}DTO get${serviceName}(${serviceName}Code code)
            throws ${serviceName}ServiceException, RemoteException;

    /**
     * Updates domain model object ${serviceName} with the values provided
     * in given Delivery Order DTO.
     *
     * @param dto a DTO that represents Delivery Order
     * @throws ${serviceName}ServiceException if any service tier exception occures
     * @throws RemoteException               if a remote exception occures
     */
    public void update${serviceName}(${serviceName}DTO dto)
            throws ${serviceName}ServiceException, ConcurrencyException, RemoteException;


    /**
     * Performs a search for existing ${serviceName}s.
     *
     * @param criteria a search criteria for looking for Delivery Orders.
     * @return a list of {@link com.example.service.${serviceName.toLowerCase()}.${serviceName}DTO} objects
     * @throws ${serviceName}ServiceException if any service tier exception occures
     * @throws RemoteException               if a remote exception occures
     */
    public List find${serviceName}s(${serviceName}SearchCriteria criteria)
            throws ${serviceName}ServiceException, RemoteException;

}
