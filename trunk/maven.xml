<project default="multiproject:install-snapshot"
    xmlns:j="jelly:core"
    xmlns:u="jelly:util"
    xmlns:ant="jelly:ant"
    xmlns:maven="jelly:maven">

    <preGoal name="idea">
        <attainGoal name="idea:multiproject"/>
        <copy todir="${basedir}" file="${basedir}/tools/idea/workspace/_root.iml"/>
    </preGoal>

    <!--    <goal name="mule:idea">-->
    <!--        <maven:reactor-->
    <!--            basedir="${basedir}/tools/idea/workspace"-->
    <!--            postProcessing="false"-->
    <!--            includes="project.xml"-->
    <!--            goals="mule:idea"-->
    <!--            banner="Creating Idea workspace"-->
    <!--            ignoreFailures="false"/>-->
    <!--    </goal>-->

    <goal name="clean-build" prereqs="clean,multiproject:clean,multiproject:install"/>

    <goal name="clean-build-snapshot" prereqs="clean,multiproject:clean,multiproject:install-snapshot"/>

    <postGoal name="multiproject:install">
        <attainGoal name="all-jars"/>
    </postGoal>

    <postGoal name="multiproject:install-snapshot">
        <attainGoal name="all-jars"/>
    </postGoal>

    <goal name="all-jars" prereqs="setvars">

        <j:set var="mule.dist.dir" value="${maven.build.dir}/dist"/>
        <echo>About to copy Mule jars to ${mule.dist.dir}</echo>
        <mkdir dir="${mule.release.dist.dir}"/>
        <mkdir dir="${mule.release.dist.dir}/temp"/>
        <fileScanner var="mulejars">
            <fileset dir="${basedir}">
                <include name="**/mule-*${pom.currentVersion}.jar"/>
            </fileset>
        </fileScanner>

        <j:forEach var="jarfile" items="${mulejars.iterator()}">
            <echo>jar is ${jarfile}</echo>
            <copy file="${jarfile}" todir="${mule.release.dist.dir}"/>
            <!--unjar src="${jarfile}" dest="${mule.release.dist.dir}/temp"/-->
        </j:forEach>

        <delete file="${mule.release.dist.dir}/mule-providers-${pom.currentVersion}.jar"/>
        <delete file="${mule.release.dist.dir}/mule-extras-${pom.currentVersion}.jar"/>
        <delete file="${mule.release.dist.dir}/mule-tests-${pom.currentVersion}.jar"/>
        <delete file="${mule.release.dist.dir}/mule-samples-${pom.currentVersion}.jar"/>
        <delete file="${mule.release.dist.dir}/mule-tools-${pom.currentVersion}.jar"/>

        <fileScanner var="mulejars">
            <fileset dir="${mule.release.dist.dir}">
                <include name="*"/>
            </fileset>
        </fileScanner>

        <j:forEach var="jarfile" items="${mulejars.iterator()}">
            <unjar src="${jarfile}" dest="${mule.release.dist.dir}/temp"/>
        </j:forEach>

        <copy file="${basedir}/mule/target/classes/META-INF/MANIFEST.MF" tofile="${mule.release.dist.dir}/temp/META-INF/Mule.mf"/>
        <copy overwrite="true" file="${basedir}/mule/target/classes/META-INF/MANIFEST.MF" tofile="${mule.release.dist.dir}/temp/META-INF/MANIFEST.MF"/>

        <echo>creating jar: ${mule.release.dist.dir}/mule-${pom.currentVersion}</echo>
        <jar manifest="${mule.release.dist.dir}/temp/META-INF/MANIFEST.MF" basedir="${mule.release.dist.dir}/temp" destfile="${mule.release.dist.dir}/mule-${pom.currentVersion}.jar"/>
        <delete dir="${mule.release.dist.dir}/temp"/>

        <copy todir="${mule.release.dist.dir}">
            <fileset file="${basedir}/mule/src/conf/mule-configuration.dtd"/>
            <fileset file="${basedir}/mule-extras/spring/src/conf/mule-spring-configuration.dtd"/>
        </copy>

        <u:available file="/var/www/html/cubis.co.uk/dtds">
            <copy todir="/var/www/html/cubis.co.uk/dtds">
                <fileset file="${basedir}/src/conf/mule-configuration.dtd"/>
                <fileset file="${basedir}/src/conf/mule-spring-configuration.dtd"/>
            </copy>
        </u:available>

        <!--local deploy -->
        <copy todir="${maven.build.dir}" file="${mule.release.dist.dir}/mule-${pom.currentVersion}.jar"/>
        <copy todir="${maven.repo.local}/mule/jars" file="${mule.release.dist.dir}/mule-${pom.currentVersion}.jar"/>

        <!-- do custom deploy -->
        <j:if test="${context.getVariable('mule.release.dist.deploy.dir')!= null}">
            <copy todir="${mule.release.dist.deploy.dir}">
                <fileset file="${mule.release.dist.dir}/*.*"/>
            </copy>
        </j:if>
    </goal>

    <goal name="mule:javadoc" prereqs="setvars,build-classpath">

        <!-- Get the year to display in the Javadocs -->
        <ant:tstamp>
            <ant:format property="year" pattern="${pom.inceptionYear}-yyyy"/>
        </ant:tstamp>

        <ant:javadoc
            destdir="${mule.release.dir}/docs/apidocs"
            author="true"
            version="true"
            use="true"
            classpathref="maven.dependency.classpath"
            windowtitle="Mule ${pom.currentVersion} API"
            doctitle="Mule ${pom.currentVersion} API"
            bottom="Copyright &amp;copy; ${year} ${pom.organization.name}. All Rights Reserved."
            stylesheetfile="${basedir}/mule/xdocs/stylesheets/maven.css"
            >

            <packageset dir="${mule.release.dir}/src/java" defaultexcludes="yes">
                <exclude name="org/mule/tck/testmodels/**"/>
            </packageset>
        </ant:javadoc>
    </goal>


    <!--=================================================-->
    <!--          Mule Release TARGETS                   -->
    <!--=================================================-->

    <goal name="setvars">
        <j:set var="mule.release.dir" value="${maven.build.dir}\release"/>
        <j:set var="mule.release.lib.dir" value="${mule.release.dir}\lib"/>
        <j:set var="mule.release.dist.dir" value="${mule.release.dir}\dist"/>
        <j:set var="mule.release.src.dir" value="${mule.release.dir}\src"/>
        <j:set var="mule.release.tools.dir" value="${mule.release.dir}\tools"/>
        <echo>Release dir is ${mule.release.dir}</echo>
        <j:set var="mule.base.context.path" value="../../.."/>
        <j:set var="mule.samples.dist" value="${mule.release.dir}/samples"/>
        <echo>Samples release dir is ${mule.samples.dist}</echo>
    </goal>

    <goal name="mule:release-prepare" prereqs="setvars">
        <echo>About to create lib and bin directories in ${mule.release.dir}</echo>
        <mkdir dir="${mule.release.dir}"/>
        <mkdir dir="${mule.release.dist.dir}"/>
        <mkdir dir="${mule.release.lib.dir}"/>
        <mkdir dir="${mule.release.lib.dir}/licenses"/>
        <mkdir dir="${mule.release.src.dir}"/>
    </goal>

    <postGoal name="test:test">
        <j:if test="${context.getVariable('maven.test.skip') == null || context.getVariable('maven.test.skip') == 'false'}">
            <echo>Setting maven.test.skip to true, so that tests do not run again!</echo>
            <j:expr value="${context.setVariable('maven.test.skip', 'true')}"/>
        </j:if>
    </postGoal>

    <goal name="mule:start-release" prereqs="mule:release-prepare,clean-build"
        description="Creates and zips build for distribution"/>

    <goal name="mule:release" description="Creates and zips build for distribution">
        <!-- for some reason the reactor is getting confused when these are set
        as prereqs?
        -->

        <attainGoal name="mule:libs"/>
        <attainGoal name="mule:src"/>
        <attainGoal name="mule:site"/>
        <attainGoal name="mule:samples"/>
        <attainGoal name="mule:tools"/>

        <copy todir="${mule.release.dir}" file="${basedir}/LICENSE.txt"/>
        <copy todir="${mule.release.dir}" file="${basedir}/README.txt"/>

        <attainGoal name="mule:javadoc"/>

        <!-- copy the full javadocs to the site docs -->
        <copy todir="${maven.build.dir}/docs">
            <fileset dir="${mule.release.dir}/docs"/>
        </copy>

        <attainGoal name="mule:zip-release"/>
    </goal>

    <goal name="build-classpath" prereqs="setvars">
        <echo>Building classpath from ${mule.release.lib.dir}</echo>
        <ant:path id="cp">
            <ant:fileset dir="${mule.release.lib.dir}">
                <ant:include name="*.jar"/>
            </ant:fileset>
            <u:available file="${mule.release.lib.dir}/mule-extras-spring">
                <ant:fileset dir="${mule.release.lib.dir}/mule-extras-spring">
                    <ant:include name="*.jar"/>
                </ant:fileset>
            </u:available>
        </ant:path>
        <property name="classpath" refid="cp"/>
    </goal>

    <goal name="mule:samples" prereqs="setvars,dist-samples"/>

    <goal name="mule:tools" prereqs="setvars">
        <mkdir dir="${mule.release.tools.dir}/benchmark"/>
        <copy todir="${mule.release.tools.dir}/benchmark">
            <fileset dir="${basedir}/tools/benchmark">
                <exclude name="target/"/>
                <exclude name="*.iml"/>
            </fileset>
        </copy>
    </goal>

    <goal name="mule:dtds">
        <j:set var="dtd.properties" value="mule.properties"/>
        <attainGoal name="mule:dtd"/>
        <j:set var="dtd.properties" value="mule-spring.properties"/>
        <attainGoal name="mule:dtd"/>
    </goal>

    <!-- generate Mule Dtd reference guide -->
    <goal name="mule:dtd">
        <echo>Generating dtd docs using ${dtd.properties}</echo>
        <ant:java classname="DTDDoc.DTDDoc" classpath="${basedir}/tools/dtd-doc/DTDDoc.jar;${basedir}/tools/dtd-doc/dtdparser120.jar;${basedir}/tools/dtd-doc/jakarta-regexp-1.2.jar">
            <ant:arg line="${basedir}/tools/dtd-doc/${dtd.properties}"/>
        </ant:java>

        <ant:copy todir="${basedir}/xdocs">
            <ant:fileset dir="${basedir}/mule_dtd_doc" includes="*.dtd.*"/>
        </ant:copy>

        <attainGoal name="html2xdoc"/>

        <ant:delete>
            <ant:fileset dir="${basedir}/xdocs" includes="*mule-configuration.dtd*.html"/>
        </ant:delete>
        <ant:delete dir="${basedir}/mule_dtd_doc"/>
    </goal>


    <goal name="mule:zip-release" prereqs="setvars">
        <mkdir dir="${maven.build.dir}/distributions"/>
        <!--<zip zipfile="${maven.build.dir}/distributions/${maven.final.name}-dist.zip">
            <zipfileset dir="${mule.release.dir}" prefix="${maven.final.name}"/>
        </zip>-->
        <tar compression="gzip" tarfile="${maven.build.dir}/distributions/${maven.final.name}-dist.tar.gz" longfile="gnu">
            <tarfileset dir="${mule.release.dir}" prefix="${maven.final.name}"/>
        </tar>
        <!-- zip up site -->
        <zip zipfile="${maven.build.dir}/distributions/${maven.final.name}-site.zip">
            <zipfileset dir="${maven.build.dir}/docs" prefix="docs"/>
        </zip>
    </goal>


    <goal name="mule:site" prereqs="mule:dtds, multiproject:site"/>

    <goal name="mule:libs" prereqs="setvars">
        <mkdir dir="${mule.release.lib.dir}/licenses"/>
        <!-- copies artifact and deps -->
        <j:set var="goal" value="mule:libs-copy"/>
        <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="mule:libs-copy">

        <echo>Copying project dependencies for ${pom.artifactId}, package ${pom.package}</echo>
        <echo>looking up licenses from ${basedir}/../../licenses</echo>
        <j:forEach var="lib" items="${pom.dependencies}">
            <j:if test="${lib.getProperty('ignore')!='true'}">
                <j:if test="${pom.package=='org.mule.extras'}">
                    <j:set var="licenses.dir" value="${basedir}/../../licenses"/>
                    <j:if test="${lib.getProperty('mule.core.jar')!='true'}">
                        <mkdir dir="${basedir}/../../target/release/lib/${pom.artifactId}"/>
                        <copy todir="${basedir}/../../target/release/lib/${pom.artifactId}"
                            file="${maven.repo.local}/${lib.artifactDirectory}/jars/${lib.getArtifact()}"/>
                    </j:if>
                </j:if>
                <j:if test="${pom.package=='org.mule'}">
                    <j:set var="licenses.dir" value="${basedir}/../licenses"/>
                    <copy todir="${basedir}/../target/release/lib"
                        file="${maven.repo.local}/${lib.artifactDirectory}/jars/${lib.getArtifact()}"/>
                </j:if>
                <j:if test="${pom.package!='org.mule.extras'}">
                    <j:set var="licenses.dir" value="${basedir}/../../licenses"/>
                    <copy todir="${basedir}/../../target/release/lib"
                        file="${maven.repo.local}/${lib.artifactDirectory}/jars/${lib.getArtifact()}"/>
                </j:if>
                <u:available file="${basedir}/../../licenses/${lib.artifactId}.license">
                    <echo>Using license ${licenses.dir}/${lib.artifactId}.license</echo>
                    <copy todir="${basedir}/../../target/release/lib/licenses"
                        file="${licenses.dir}/${lib.artifactId}.license"/>
                </u:available>
                <u:available file="${license.dir}/${lib.groupId}.license">
                    <echo>Using license ${licenses.dir}/${lib.groupId}.license</echo>
                    <copy todir="${basedir}/../../target/release/lib/licenses"
                        file="${licenses.dir}/${lib.groupId}.license"/>
                </u:available>
            </j:if>
        </j:forEach>
    </goal>

    <goal name="mule:src">
        <!-- copies src to one directory  -->
        <j:set var="goal" value="mule:src-copy"/>
        <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="mule:src-copy">
        <j:if test="${pom.artifactId!='mule'}">
            <echo>Copying src for ${pom.artifactId} dir is ${maven.src.dir}</echo>
            <j:if test="${pom.artifactId=='mule-core'}">
                <copy todir="${basedir}/../target/release/src/">
                    <fileset dir="${maven.src.dir}"/>
                </copy>
            </j:if>
            <j:if test="${pom.artifactId!='mule-core'}">
                <copy todir="${basedir}/../../target/release/src/">
                    <fileset dir="${maven.src.dir}"/>
                </copy>
            </j:if>
        </j:if>
    </goal>

    <!--=================================================-->
    <!--                DEPLY TARGETS                  -->
    <!--=================================================-->
    <goal name="mule:deploy">
        <exec dir="${maven.build.dir}/distributions" executable="${maven.scp.executable}">
            <arg line="${maven.scp.args} mule-${pom.currentVersion}-site.tag.gz ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}"/>
        </exec>

        <exec dir="." executable="${maven.ssh.executable}">
            <arg line="${maven.ssh.args} ${maven.username}@${pom.siteAddress} 'cd ${pom.siteDirectory} &amp;&amp; rm -fr doc &amp;&amp; tar zxvf mule-${pom.currentVersion}-site.tar.gz"/>
        </exec>

        <fileScanner var="mulejars">
            <fileset dir="${mule.release.dist.dir}">
                <include name="*"/>
            </fileset>
        </fileScanner>

        <j:forEach var="jarfile" items="${mulejars.iterator()}">
            <exec dir="${mule.release.dist.dir}" executable="${maven.scp.executable}">
                <arg line="${maven.scp.args} ${jarfile} ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/jars/"/>
            </exec>
        </j:forEach>

        <exec dir="${maven.build.dir}/distributions" executable="${maven.scp.executable}">
            <arg line="${maven.scp.args} mule-${pom.currentVersion}-dist.zip ${maven.username}@${pom.siteAddress}:${pom.siteDirectory}/../dist/distributions/"/>
        </exec>

        <j:set var="goal" value="jar:deploy"/>
        <attainGoal name="multiproject:goal"/>
    </goal>

    <goal name="dist-samples" prereqs="setvars">
        <j:set var="root.dir" value="${basedir}"/>
        <maven:reactor
            basedir="${basedir}/samples"
            postProcessing="false"
            includes="project.xml"
            goals="dist-samples"
            banner="Dist Samples"
            ignoreFailures="false"/>
    </goal>
</project>