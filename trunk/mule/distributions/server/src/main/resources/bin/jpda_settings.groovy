/*
 * $Id$
 * --------------------------------------------------------------------------------------
 * Copyright (c) MuleSource, Inc.  All rights reserved.  http://www.mulesource.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

def jvmArgs = []
String originalConfigPath = args[0]

args[1..<args.size()].each { String s ->
    s.split("\\s-").each { jvmArgs << it }
}

// looking for maximum number of wrapper.java.additional property
Integer num = 0;
new File(originalConfigPath).eachLine {
    String line ->
    switch (line) {
        case ~/^\s*wrapper\.java\.additional\..+/:
            m = line =~ /^\s*wrapper\.java\.additional\.(\d+).+/
            m.find()
            num = Math.max(Integer.valueOf(m[0][1]), num)
        break
    }
}

// extracting directory
m = originalConfigPath =~ /^.*[\\\/]/
m.matches()

new File(m[0] + "wrapper-jpda.conf").withWriter() {
    Writer w ->
    w << "# Do not edit this file!\n"
    w << "# This is a generated file to add JPDA debug parameters to JVM\n"
    jvmArgs.each { String arg ->
        w << "wrapper.java.additional.${++num}=-${arg.replaceFirst("^-", "")}\n"
    }
}
