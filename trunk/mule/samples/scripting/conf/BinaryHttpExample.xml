<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mule-configuration PUBLIC "-//SymphonySoft //DTD mule-configuration XML V1.0//EN"
    "http://www.symphonysoft.com/dtds/mule/mule-configuration.dtd">

<mule-configuration id="HttpBinaryExample" version="1.0">

    <description>
        This example demonstrates sending and receiving serialised objects over Http.  The Http request is made using the
        MuleClient (see http.BinaryHttpExample.java). The request sends nd Integer object with a value of 24 and a List of
        Strings is returned as the response.
        The examples uses a groovy script as the service component.
    </description>

    <transformers>
        <transformer name="ByteArrayToSerializable" className="org.mule.transformers.simple.ByteArrayToSerializable"/>
    </transformers>
    <global-endpoints>
        <endpoint name="ServiceEndpoint" address="http://localhost:8081" synchronous="true">
            <properties>
                <property name="Content-Type" value="binary"/>
            </properties>
        </endpoint>
    </global-endpoints>

    <model name="main">
        <mule-descriptor name="Service" implementation="org.mule.components.script.jsr223.ScriptComponent">
            <inbound-router>
                <global-endpoint name="ServiceEndpoint" transformers="ByteArrayToSerializable" />
            </inbound-router>
            <properties>
                <property name="scriptEngineName" value="groovy"/>
                <text-property name="scriptText">
                     def msg = eventContext.transformedMessageAsString
                     log.boilerPlate("Message Received: ${msg} - class: ${msg.class.name}")
                     return ["Hello", ":-)"];
                </text-property>
            </properties>
        </mule-descriptor>
    </model>

</mule-configuration>
