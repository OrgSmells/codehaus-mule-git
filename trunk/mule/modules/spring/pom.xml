<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.mule</groupId>
        <artifactId>mule-extras</artifactId>
        <version>2.0-SNAPSHOT</version>
    </parent>
    <artifactId>mule-extras-spring</artifactId>
    <packaging>jar</packaging>
    <name>Spring Extensions</name>
    <description>Provides extensions to use the Spring framework with Mule such as utilising the the spring container to build components managed by Mule.</description>   
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring</artifactId>
            <version>2.0-rc2</version>
            <!--<exclusions>-->
                <!--<exclusion>-->
                    <!--<groupId>commons-beanutils</groupId>-->
                    <!--<artifactId>commons-beanutils</artifactId>-->
                <!--</exclusion>-->
            <!--</exclusions>-->
        </dependency>
        <!-- Needed by SpringTransactionFactory
             TODO: verify whether this dependency is really required. -->
        <dependency>
            <groupId>geronimo-spec</groupId>
            <artifactId>geronimo-spec-jms</artifactId>
            <version>1.1-rc4</version>
        </dependency>

        <!-- For test cases only -->
        <dependency>
            <groupId>org.mule</groupId>
            <artifactId>mule-extras-client</artifactId>
            <version>${version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mule</groupId>
            <artifactId>mule-http-provider</artifactId>
            <version>${version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mule</groupId>
            <artifactId>mule-vm-provider</artifactId>
            <version>${version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-jxpath</groupId>
            <artifactId>commons-jxpath</artifactId>
            <version>1.2</version>
            <scope>test</scope>
            <!-- TODO get rid of duplication in the top-level providers pom.xml -->
            <exclusions>
                <exclusion>
                    <groupId>xerces</groupId>
                    <artifactId>xerces</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--
            TODO this is a hack. Duplicate declaration (original is in the top pom.xml)
            makes Spring happy to compile when run from the project root folder,
            otherwise it cannot find classes from commons-logging.

            It seems m2 dependency visibility hierarchy is limited to 1 level deep.
        -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.0.4</version>
        </dependency>
    </dependencies>
</project>
