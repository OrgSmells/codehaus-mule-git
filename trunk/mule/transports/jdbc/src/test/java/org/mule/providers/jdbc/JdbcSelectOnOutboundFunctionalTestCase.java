/*
 * $Id$
 * --------------------------------------------------------------------------------------
 * Copyright (c) MuleSource, Inc.  All rights reserved.  http://www.mulesource.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

package org.mule.providers.jdbc;

import org.mule.MuleManager;
import org.mule.extras.client.MuleClient;
import org.mule.impl.MuleMessage;
import org.mule.providers.NullPayload;
import org.mule.providers.jdbc.util.MuleDerbyUtils;
import org.mule.tck.FunctionalTestCase;
import org.mule.umo.UMOMessage;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import org.apache.commons.dbutils.QueryRunner;

public class JdbcSelectOnOutboundFunctionalTestCase extends FunctionalTestCase
{

    private  static final String[] TEST_VALUES = {"Test", "The Moon", "Terra"};

    protected String getConfigResources()
    {
        return "jdbc-select-outbound.xml";
    }

    protected void doPostFunctionalSetUp() throws Exception
    {
        super.doPostFunctionalSetUp();

        JdbcConnector jdbcConnector = (JdbcConnector) MuleManager.getInstance().getConnectors().get("jdbcConnector");
        QueryRunner qr = new QueryRunner(jdbcConnector.getDataSource());

        qr.update(jdbcConnector.getConnection(), "CREATE PROCEDURE TEST_PROC(IN A INTEGER,\n" +
                "INOUT B INTEGER, OUT C DOUBLE, OUT S VARCHAR(1024))\n" +
                "PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME \n" +
                "'org.mule.providers.jdbc.DerbyStoredProc.plus'");
        logger.debug("Procedure created");

        int updated;

        try
        {
            updated = qr.update(jdbcConnector.getConnection(), "DELETE FROM TEST");
            logger.debug(updated + " rows deleted");
        }
        catch (Exception e)
        {
            qr.update(jdbcConnector.getConnection(), "CREATE TABLE TEST(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0)  NOT NULL PRIMARY KEY,TYPE INTEGER,DATA VARCHAR(255),ACK TIMESTAMP,RESULT VARCHAR(255))");
            logger.debug("Table created");
        }

        updated = qr.update(jdbcConnector.getConnection(), "INSERT INTO TEST(TYPE, DATA) VALUES (1, '" + TEST_VALUES[0] + "')");
        logger.debug(updated + " rows updated");
        updated = qr.update(jdbcConnector.getConnection(), "INSERT INTO TEST(TYPE, DATA) VALUES (2, '" + TEST_VALUES[1] + "')");
        logger.debug(updated + " rows updated");
        updated = qr.update(jdbcConnector.getConnection(), "INSERT INTO TEST(TYPE, DATA) VALUES (3, '" + TEST_VALUES[2] + "')");
        logger.debug(updated + " rows updated");

    }

    protected void doFunctionalTearDown() throws Exception
    {
        JdbcConnector jdbcConnector = (JdbcConnector) MuleManager.getInstance().getConnectors().get("jdbcConnector");
        QueryRunner qr = new QueryRunner(jdbcConnector.getDataSource());
        int updated = qr.update(jdbcConnector.getConnection(), "DELETE FROM TEST");
        logger.debug(updated + " rows deleted");
        qr.update(jdbcConnector.getConnection(), "DROP PROCEDURE TEST_PROC");
        logger.debug("Procedure dropped");

        super.doFunctionalTearDown();
    }

    protected void suitePreSetUp() throws Exception
    {
        MuleDerbyUtils.defaultDerbyCleanAndInit("derby.properties", "database.name");
        super.suitePreSetUp();
    }

    public void testSelectOnOutbound() throws Exception
    {
        MuleClient client = new MuleClient();
        UMOMessage reply = client.send("vm://jdbc.test", new MuleMessage(NullPayload.getInstance()));
        assertNotNull(reply.getPayload());
        assertTrue(reply.getPayload() instanceof List);
        List resultList = (List) reply.getPayload();
        assertTrue(resultList.size() == 1);
        assertTrue(resultList.get(0) instanceof Map);
        Map resultMap = (Map) resultList.get(0);
        assertEquals(new Integer(1), resultMap.get("TYPE"));
        assertEquals(TEST_VALUES[0], resultMap.get("DATA"));
    }

    public void testStoredProc() throws Exception 
    {
        MuleClient client = new MuleClient();
        UMOMessage reply = client.send("vm://proc.test", new MuleMessage(NullPayload.getInstance()));
        assertNotNull(reply.getPayload());
        assertTrue(reply.getPayload() instanceof Map);
        Map resultMap = (Map) reply.getPayload();
        assertTrue(resultMap.size() == 3);
        assertEquals(resultMap.get("b"), new Integer(10));
        assertEquals(resultMap.get("c"), new Double(8.3));
        assertEquals(resultMap.get("s"), "test");
    }

    public void testInsert() throws Exception
    {
        MuleClient client = new MuleClient();
        UMOMessage reply = client.send("vm://insert.test", new MuleMessage(NullPayload.getInstance()));
        assertTrue(reply.getPayload() instanceof NullPayload);
        JdbcConnector jdbcConnector = (JdbcConnector) MuleManager.getInstance().getConnectors().get("jdbcConnector");
        PreparedStatement statement = jdbcConnector.getConnection().prepareStatement("SELECT type, data FROM Test WHERE type = 4 AND data='test insert'");
        ResultSet result = statement.executeQuery();
        int counter = 0;
        while (result.next())
        {
            counter++;
        }
        assertEquals(counter, 1);
        result.close();
        statement.close();

    }

    public void testSelectOnOutboundByPropertyExtractor() throws Exception
    {
        MuleClient client = new MuleClient();
        MyMessage payload = new MyMessage(2);
        UMOMessage reply = client.send("vm://terra", new MuleMessage(payload));
        assertNotNull(reply.getPayload());
        assertTrue(reply.getPayload() instanceof List);
        List resultList = (List) reply.getPayload();
        logger.debug("resultList.size() " + resultList.size());
        assertTrue(resultList.size() == 1);
        assertTrue(resultList.get(0) instanceof Map);
        Map resultMap = (Map) resultList.get(0);
        assertEquals(new Integer(2), resultMap.get("TYPE"));
        assertEquals(TEST_VALUES[1], resultMap.get("DATA"));
    }

    public static class MyMessage implements Serializable
    {

        public MyMessage(int type)
        {
            this.type = type;
        }

        private int type;

        public int getType()
        {
            return type;
        }

        public void setType(int type)
        {
            this.type = type;
        }
    }

}


