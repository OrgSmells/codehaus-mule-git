<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mule-configuration PUBLIC "-//MuleSource //DTD mule-configuration XML V1.0//EN"
                                "http://mule.mulesource.org/dtds/mule-spring-configuration.dtd">

<!--  This is the configuration for the Loan Broker ESB example -->
<!-- See http://mule.mulesource.org/LoanBroker  for more information, diagrams and even a presentation! -->

<mule-configuration id="Mule_Loan_broker_BPM" version="1.0">

    <description>
    Loan Broker example which uses a BPMS (a.k.a. Process Engine) for managing process flow and decision making.
    See http://mule.mulesource.org/LoanBroker+BPM for details.
    </description>

    <connector name="jBpmConnector" className="org.mule.providers.bpm.ProcessConnector">
        <properties>
            <!-- This field in LoanQuoteRequest holds the unique process ID. -->
            <property name="processIdField" value="requestId" />
            <!-- A process can only reference the outgoing endpoints for its component. -->
            <property name="localEndpointsOnly" value="true" />
            <!-- jBpm itself is configured by a series of Spring beans at the end of
                 this file. -->
            <spring-property name="bpms"><ref local="jbpm" /></spring-property>
        </properties>
    </connector>

    <connector name="jmsConnector" className="org.mule.providers.jms.JmsConnector">
        <properties>
            <property name="connectionFactoryJndiName" value="ConnectionFactory"/>
            <property name="jndiInitialFactory" value="org.activemq.jndi.ActiveMQInitialContextFactory"/>
            <property name="specification" value="1.1"/>
            <map name="connectionFactoryProperties">
                <property name="useEmbeddedBroker" value="true"/>
            </map>
        </properties>
    </connector>

    <endpoint-identifiers>
        <!-- The Loan Broker is driven by a Process Engine -->
        <endpoint-identifier name="ProcessEngine" value="bpm://LoanBroker"/>

        <!-- ***************************************************
             Events
             *************************************************** -->
        <!-- Customer loan requests to the Loan Broker -->
        <endpoint-identifier name="LoanBrokerRequests" value="jms://loan.broker.requests"/>
        <!-- Loan quote from the banks -->
        <endpoint-identifier name="LoanQuotes" value="jms://loan.quotes"/>
        <!-- Requests to the credit agency -->
        <endpoint-identifier name="CreditGateway" value="jms://credit.agency.requests"/>
        <!-- Customer credit profiles from the credit agency -->
        <endpoint-identifier name="CreditProfiles" value="jms://credit.profiles"/>

        <!-- ***************************************************
             Services
             *************************************************** -->
        <!-- For simplicity, the Credit Agency is just a local POJO -->
        <endpoint-identifier name="CreditAgency" value="vm://CreditAgency"/>

        <!-- The banks are accessed via web services -->
        <endpoint-identifier name="BigBank" value="vm://BigBank"/>
        <endpoint-identifier name="MediumBank" value="vm://MediumBank"/>
        <endpoint-identifier name="SmallBank" value="vm://SmallBank"/>
        <!--
        <endpoint-identifier name="BigBank" value="axis:http://localhost:10080/mule"/>
        <endpoint-identifier name="MediumBank" value="axis:http://localhost:30080/mule"/>
        <endpoint-identifier name="SmallBank" value="axis:http://localhost:50080/mule"/>
        -->
    </endpoint-identifiers>

    <model name="loan-broker">
        <!-- ***************************************************
             Process Engine
             *************************************************** -->

        <!-- Incoming messages to the process engine -->
        <mule-descriptor name="ToBPMS" implementation="org.mule.components.simple.PassThroughComponent">
            <inbound-router>
                <!-- Incoming message = CustomerRequest -->
                <endpoint address="LoanBrokerRequests"/>
                <!-- Incoming message = CreditProfile -->
                <endpoint address="CreditProfiles"/>
            </inbound-router>
            <outbound-router>
                <router className="org.mule.routing.outbound.FilteringOutboundRouter">
                    <endpoint address="ProcessEngine" synchronous="false" />
                </router>
            </outbound-router>
        </mule-descriptor>

        <!-- Outgoing messages from the process engine -->
        <mule-descriptor name="FromBPMS" implementation="org.mule.components.simple.PassThroughComponent">
            <inbound-router>
                <endpoint address="ProcessEngine" />
            </inbound-router>
            <outbound-router>
                <router className="org.mule.routing.outbound.EndpointSelector">
                    <!-- Outgoing message = Customer -->
                    <endpoint address="CreditGateway"/>

                    <!-- Outgoing message = LoanQuoteRequest -->
                    <endpoint address="BigBank" synchronous="true">
                        <properties><property name="method" value="getLoanQuote"/></properties>
                    </endpoint>
                    <endpoint address="MediumBank" synchronous="true">
                        <properties><property name="method" value="getLoanQuote"/></properties>
                    </endpoint>
                    <endpoint address="SmallBank" synchronous="true">
                        <properties><property name="method" value="getLoanQuote"/></properties>
                    </endpoint>

                    <!-- Outgoing message = LoanQuote -->
                    <endpoint address="LoanQuotes"/>
                </router>
            </outbound-router>
        </mule-descriptor>

        <!-- ***************************************************
             Services
             *************************************************** -->
        <!-- The credit agency service will get the credit profile for a customer -->
        <mule-descriptor name="CreditAgency"
            inboundEndpoint="CreditGateway"
            outboundEndpoint="CreditProfiles"
            implementation="org.mule.samples.loanbroker.esb.creditagency.CreditAgency">
        </mule-descriptor>

        <!-- These are mock bank services that represent remote bank loan services -->
        <mule-descriptor name="BigBank"
            inboundEndpoint="BigBank"
            implementation="org.mule.samples.loanbroker.esb.bank.Bank">
        </mule-descriptor>
        <mule-descriptor name="MediumBank"
            inboundEndpoint="MediumBank"
            implementation="org.mule.samples.loanbroker.esb.bank.Bank">
        </mule-descriptor>
        <mule-descriptor name="SmallBank"
            inboundEndpoint="SmallBank"
            implementation="org.mule.samples.loanbroker.esb.bank.Bank">
        </mule-descriptor>
    </model>

    <!-- ***************************************************
         BPMS Configuration
         *************************************************** -->
    <!-- BPMS object for Mule's BPM Connector -->
    <bean id="jbpm" class="org.jbpm.msg.mule.Jbpm">
        <spring-property name="jbpmConfiguration">
            <ref local="jbpmConfig" />
        </spring-property>
    </bean>

    <!-- jBPM Configuration -->
    <bean id="jbpmConfig" class="org.springmodules.workflow.jbpm31.LocalJbpmConfigurationFactoryBean">
        <spring-property name="sessionFactory">
            <ref local="jbpmSessionFactory"/>
        </spring-property>
        <spring-property name="configuration">
            <value>jbpm.cfg.xml</value>
        </spring-property>
        <spring-property name="processDefinitions">
            <spring-list>
                <bean id="loanBroker" class="org.springmodules.workflow.jbpm31.definition.ProcessDefinitionFactoryBean">
                    <spring-property name="definitionLocation">
                        <value>loan-broker-process.xml</value>
                    </spring-property>
                </bean>
            </spring-list>
        </spring-property>
        <spring-property name="createSchema"><value>false</value></spring-property>
    </bean>

    <!-- JBPM Hibernate SessionFactory -->
    <bean id="jbpmSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <spring-property name="dataSource">
            <ref local="jbpmDataSource" />
        </spring-property>
        <spring-property name="mappingLocations">
            <value>classpath*:/org/jbpm/**/*.hbm.xml</value>
        </spring-property>
        <spring-property name="typeDefinitions">
            <ref local="jbpmTypes" />
        </spring-property>

        <spring-property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
                <prop key="hibernate.c3p0.min_size">1</prop>
                <prop key="hibernate.c3p0.max_size">3</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.query.substitutions">true 1, false 0</prop>
                <prop key="hibernate.jdbc.batch_size">0</prop>
                <!-- Create/update the database tables automatically when the JVM starts up -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </spring-property>
    </bean>

    <!-- JBPM data types -->
    <bean id="jbpmTypes" class="org.springframework.orm.hibernate3.TypeDefinitionBean">
        <spring-property name="typeName"><value>string_max</value></spring-property>
        <spring-property name="typeClass"><value>org.jbpm.db.hibernate.StringMax</value></spring-property>
    </bean>

    <!-- JBPM Datasource -->
    <bean id="jbpmDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <spring-property name="driverClassName"><value>org.hsqldb.jdbcDriver</value></spring-property>
        <spring-property name="url"><value>jdbc:hsqldb:mem:.;sql.enforce_strict_size=true</value></spring-property>
        <spring-property name="username"><value>sa</value></spring-property>
        <spring-property name="password"><value></value></spring-property>
    </bean>
</mule-configuration>
