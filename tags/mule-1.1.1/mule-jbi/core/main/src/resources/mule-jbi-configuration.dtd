<!--
	Mule - JBI
	This DTD describes the grammar of the Mule JBI configuration properties
	<p>
	Author: Ross Mason, SymphonySoft Limited &#169; 2003-2005
	</p>
	@root jbi-container

-->

<!ELEMENT jbi-container (description?,properties?,object-container*,mule-component+)>

<!--
    The id attribute allows for a unique id for this file as it is often the case that
    distributed Mule environments have their own properties
-->
<!ATTLIST jbi-container id		  	NMTOKEN         #IMPLIED>
<!--
	The version attribute is used to bind a mule_props.xml
    file to a given version of this dtd. This will help to
    avoid versions conflicts.
-->
<!ATTLIST jbi-container version    CDATA           "1.0">

<!--

	A <i>endpoint</i> are communication channel definitions to some message system.  These
	are used to publish and subscibe messages in and outside of Mule

    If the endpoint is of type receiver The filter is used to filter incoming
    events.  Not all endpoint providers support filtering so if a filter is set on an endpoint
    that uses a provider that doesn't support filtering an UnsupportedOperationException
    is thrown.

	The property element allows to add custom attributes to the endpoint.

-->

<!ELEMENT endpoint ((transaction)?, (filter)?, (security-filter)?, (properties)?)>

<!--
	The name attribute is used to bind a <i>endpoint</i> to a logical name in the system
	This must be unique for each Mule instance. If not set one will be generated
-->

<!ATTLIST endpoint name 		ID    		#IMPLIED>

<!--
The ref name of this object if it is to be loaeded from a container such as spring or
Jndi
-->
<!ATTLIST endpoint ref             		CDATA         		#IMPLIED>
<!--
	This specifes the communication endpoint.  This will have a different format depending
	on the transport protocol being used i.e.
	<ul>
		<li>smtp -&gt; admin&#64;mycompany.com</li>
		<li>jms  -&gt; shipping.orders.topic</li>
		<li>sms  -&gt; +447910010010</li>
	</ul>

	if an endpoint address is not specifed it will be assumed that it will be determined at run-time
	by the calling application.  The endpoint address must be a URI address or it can be a logical name for an
    endpoint as long as it is declared in a <i>endpoint</i> block.
	Example uris are:
	<ul>
		<li>vm://localhost/test.queue?transformers=ObjectToXml</li>
		<li>pop3://ross:password@mail.muleumo.org?createConnector=ALWAYS</li>
		<li>file:///C:/temp/mule?transformers=FileMessageToObject</li>
	</ul>
-->

<!ATTLIST endpoint address		CDATA			#REQUIRED>
<!--
	The name of the service that will be crated for this endpoint
-->
<!ATTLIST endpoint service	CDATA   		#IMPLIED>
<!--
    synchronous
    determines if requests received on this endpoint execute within a single thread
    if not set the MuleManager synchronous property will be used
-->
<!ATTLIST endpoint synchronous	(true|false)			#IMPLIED>

<!--
	Defines transactional behaviour for this endpoint
-->

<!ELEMENT transaction (constraint?)>

<!--
	The factory attribute defines the <i>UMOTransactionFactory</i> to use when creating new
	transactions. This is only require when the transaction config is declared on an inbound
    provider.
-->

<!ATTLIST transaction factory 		NMTOKEN    		#IMPLIED>

<!--
	The Action attribute determise the way that the provider demarcates
	transactions when it receives an event.

	NONE - tells the provider not to do anything regarding transaction management.
	ALWAYS_BEGIN - Will always start a new transaction when an event is received.
	BEGIN_OR_JOIN - Will join the transaction if one is in progress otherwise one will be started.
	ALWAYS_JOIN - Expects a transaction to be in progress and joins it.
	JOIN_IF_POSSIBLE - Will join a transaction if one is in progress others just continues processing.

-->

<!ATTLIST transaction action 		(NONE | ALWAYS_BEGIN |
										BEGIN_OR_JOIN | ALWAYS_JOIN |
										JOIN_IF_POSSIBLE )     			#IMPLIED>

<!--
	The commitAction attribute determines how transactions are managed when an event is published.

	NONE - tells the provider not to do anything regarding transaction management.
	ALWAYS_COMMIT - Will expect a transaction to be in process and will commit it.
	JOIN_IF_POSSIBLE - Will commit a transaction if one is in progress others just continues processing.

-->

<!--<!ATTLIST transaction commitAction 		(NONE | ALWAYS_COMMIT | COMMIT_IF_POSSIBLE )    		#IMPLIED>-->

<!--
	Transaction timeout for transactions initiated from the endpoint associated with
    this transaction config.
-->

<!ATTLIST transaction timeout 		NMTOKEN    		#IMPLIED>

<!--
    Constraints can be defined on a send provider to control how and when a transaction
    gets committed.  For example, to commit a transaction once 3 jms messages have been
    processed you can define a BatchConstraint on the transaction and set the batch size to 3.
    These constraints work the same way as filters and properties on the filters can be set
    as attributes on the filter xml element.
-->
<!ELEMENT constraint (left-filter?,right-filter?, filter?)>

<!--
    className
    A fully qualified class name of the filter Constraint to use.  Implementations should always
    implement <i>org.mule.umo.UMOFilter</i>.
-->
<!ATTLIST constraint className          NMTOKEN         #REQUIRED>

<!--
because I can't find a way of allowing arbitary attributes on an element,
I am going to define a common set of attributes for filters but users can add their own
or relax dtd validation on their parser.
-->
<!ATTLIST constraint batchSize                 NMTOKEN         #IMPLIED>
<!ATTLIST constraint frequency                 CDATA           #IMPLIED> <!-- milliseconds -->
<!ATTLIST constraint expectedType              CDATA           #IMPLIED>
<!ATTLIST constraint path                      CDATA           #IMPLIED>
<!ATTLIST constraint pattern                   CDATA           #IMPLIED>
<!ATTLIST constraint expression                CDATA           #IMPLIED>

<![IGNORE[
   <!ELEMENT configuration>
]]>
<!--
	A Container context is used to retrieve object properties from the container.
    A container property is referenced using the container-property element.
    There are different implementations for different containers
	such as PicoContainer or Spring
-->
<!ELEMENT object-container (properties?, configuration?)>

<!--

	The fully qualified class name of the container context.  Customer contexts must implement
	<i>org.mule.umo.UMOContainerContext</i>.
    Configuration of the container itself should be provided though properties on this
    element.
-->
<!ATTLIST object-container className  	NMTOKEN		#REQUIRED>

<!--
    The name of this container context.  Containers have a default name, which
    is usually the the name of the container implementation
-->
<!ATTLIST object-container name  	CDATA		#IMPLIED>

<!--
A blob of configuration of configration data that can be used to embed application
specific configuration in a Mule Xml document
-->
<!ELEMENT configuration (CDATA)>
<!--
The doctype declaration to use for the configuration fragment.
can be null if no validation is to be performed or the fragment is not Xml
the doc type can be in the form of :
<!DOCTYPE mule-configuration PUBLIC "-//SymphonySoft //DTD mule-configuration XML V1.0//EN"
  "http://www.symphonysoft.com/dtds/mule/mule-configuration.dtd">
or
mule-configuration PUBLIC "-//SymphonySoft //DTD mule-configuration XML V1.0//EN"
"http://www.symphonysoft.com/dtds/mule/mule-configuration.dtd"
-->
<!ATTLIST configuration doctype         CDATA       #IMPLIED>

<!--
The ecoding to use in the Xml declaration for the configuration fragment.
Can be null if fragment is not Xml.  If not set UTF-8 will be used.
-->
<!ATTLIST configuration encoding         CDATA       #IMPLIED>

<!--
	A <i>mule-component</i> describes a single mule component, a MuleUMO. a component is an autonomous
	unit that executes a particular function by receiving an input doing some processing
	on the input and outputig a result, thus triggering futher events in the system.
-->

<!ELEMENT mule-component ((inbound-router)?, (outbound-router)?, (response-router)?, (properties)?)>

<!--
	name
	The name to associate with the mule-descriptor
-->

<!ATTLIST mule-component name 				    		CDATA   	    #REQUIRED>

<!--
The ref name of this object if it is to be loaeded from a container such as spring or
Jndi
-->
<!ATTLIST mule-component ref             		CDATA         		#IMPLIED>

<!--
	The class of the object or an object reference of the component being registered as an UMO.
	If the implementation is an object reference then it will be resolved using the component resolver
	configured on the model
-->
<!ATTLIST mule-component className		    	NMTOKEN         #IMPLIED>

<!--
    The version on the Mule UMO.  This is currently not used by the mule run-time but may
    be used in future
-->
<!ATTLIST mule-component version                 		NMTOKEN         #IMPLIED>


<!--
    A message router configures different routing paths for events that are dispatched for a UMO
    component. An outbound router is concerned with messages/events being sent out from a UMO component.
    You can specify diferent routing rules for different providers configured on the
    mule-descriptor.  You can also chain routers together by embedding one router declaration inside
    the other
-->
<!ELEMENT outbound-router (catch-all-strategy?, router+)>

<!--
Whether every configured router will be matched against
-->
<!ATTLIST outbound-router matchAll               (true | false)           "false">

<!--
   A message router configures different routing paths for events that are dispatched for a UMO
    component. An inbound router is concerned with messages/events being received by providers configured
    on the mule-descriptor.
-->
<!ELEMENT inbound-router ((catch-all-strategy)?,(endpoint)*,(global-endpoint)*,(router)*)>

<!--
Whether every configured router will be matched
-->
<!ATTLIST inbound-router matchAll               (true | false)           "false">

<!--
   A message router configures how a resonse message will be routed to a client when
   using request/response message processing.
-->
<!ELEMENT response-router ((endpoint)*,(global-endpoint)*,(router)*)>

<!--
   This attibute defines the response transformers (if any) that will be applied
   to the response message before returning to the client. Developers can define
   a response-router with only a transformer and no actual routers to configure a
   response transformer
-->
<!ATTLIST response-router transformers              IDREFS           #IMPLIED>

<!--
	This attribute can be used to change the default behavior of the respone router
	regarding the processing of the received event. If set to false, the message
	will be router in the outbound router instead of beeing sent back to the
	inbound router.
-->
<!ATTLIST response-router stopProcessing        (true | false)           "true">

<!--
A catch-all-strategy is invoked to route an event when an event is not accepted by any of the configured
routers.
-->
<!ELEMENT catch-all-strategy ((endpoint?|global-endpoint?), (properties)?)>

<!--
endpoint
Refers to an optional uri that can be resolvered as a provider.  This attribute functions the same
way as the provider attribute
-->

<!--
className
Is a fully qualified class name of the catch all strategy class
-->
<!ATTLIST catch-all-strategy className                  NMTOKEN           #REQUIRED>

<!--
    A router with route an event based on some criteria configured by the route, this criteria may be based
    on the content of the event, the type of event, metadata, etc.
    It is possible to chain routers together to combine different routing logic to a single
    event.  to chain routers you must define once router inside another.
-->

<!ELEMENT router (endpoint*, global-endpoint*, transaction?, filter?, properties?)>

<!--
    className
    A fully qualified class name of the Router to use.  Implementations must
    use org.mule.umo.routing.UMOOutboundRouter
-->

<!ATTLIST router className                   NMTOKEN           #REQUIRED>

<!--
    enableCorrelation
    This is used by outbound routers to determine if a correlationId should be set
    on the message being routed.  By default the correlationId is set as the current
    message id
-->

<!ATTLIST router enableCorrelation           (ALWAYS | NEVER | IF_NOT_SET)           "IF_NOT_SET">

<!--
    propertyExtractor
    Is a fully qualified classname of a class that implements org.mule.config.PropertyExtractor
    This object will be used to extract properties such as CorrelationId from the incoming message
-->

<!ATTLIST router propertyExtractor           NMTOKEN                                #IMPLIED>

<!--
    filters are used to determine whether the router should accept the current
    message.
    Note that any properties on the filter can be set by setting attributes
    on the filter element. The properties names are the bean properties names
    without the  'set'.
    You can also define two filters on a filter, the left filter and right filter
    these can be used when using logic filters to join filters.
-->

<!ELEMENT filter (properties?, filter?, left-filter?, right-filter?)>

<!--
    className
    A fully qualified class name of the Filter to use.  Implementations must
    use org.mule.umo.UMOFilter.
-->

<!ATTLIST filter className                   NMTOKEN           #REQUIRED>

<!--
because I can't find a way of allowing arbitary attributes on an element,
I am going to define a common set of attributes for filters but users can add their own
or relax dtd validation on their parser
-->
<!ATTLIST filter pattern                   CDATA           #IMPLIED>
<!ATTLIST filter expression                CDATA           #IMPLIED>
<!ATTLIST filter configFile                CDATA           #IMPLIED>
<!ATTLIST filter expectedType              CDATA           #IMPLIED>
<!ATTLIST filter path                      CDATA           #IMPLIED>

<!-- see explanation for 'filter' element -->
<!ELEMENT left-filter (properties?, filter?, left-filter?, right-filter?)>

<!-- see explanation for 'filter' element -->
<!ATTLIST left-filter className                   NMTOKEN           #REQUIRED>
<!--
because I can't find a way of allowing arbitary attributes on an element,
I am going to define a common set of attributes for filters but users can add their own
or relax dtd validation on their parser
-->
<!ATTLIST left-filter pattern                   CDATA           #IMPLIED>
<!ATTLIST left-filter expression                CDATA           #IMPLIED>
<!ATTLIST left-filter configFile                CDATA           #IMPLIED>
<!ATTLIST left-filter expectedType              CDATA           #IMPLIED>
<!ATTLIST left-filter path                      CDATA           #IMPLIED>

<!-- see explanation for 'filter' element -->
<!ELEMENT right-filter (properties?, filter?, left-filter?, right-filter?)>

<!-- see explanation for 'filter' element -->
<!ATTLIST right-filter className                   NMTOKEN           #REQUIRED>
<!--
because I can't find a way of allowing arbitary attributes on an element,
I am going to define a common set of attributes for filters but users can add their own
or relax dtd validation on their parser
-->
<!ATTLIST right-filter pattern                   CDATA           #IMPLIED>
<!ATTLIST right-filter expression                CDATA           #IMPLIED>
<!ATTLIST right-filter configFile                CDATA           #IMPLIED>
<!ATTLIST right-filter expectedType              CDATA           #IMPLIED>
<!ATTLIST right-filter path                      CDATA           #IMPLIED>

<!--
  		A collection of properties for the parent component
-->

<!ELEMENT properties ((property | text-property | factory-property | container-property | system-property | map | list | file-properties)*)>

<!--
  		An property element allows arbitrary name/value pairs.
-->

<!ELEMENT property EMPTY>

<!--
	The name identifies the name of the attribute.
-->

<!ATTLIST property name 			CDATA		#REQUIRED>
<!--
	The value identifies the value of the attribute.
-->
<!ATTLIST property value 			CDATA		#REQUIRED>

<!ELEMENT text-property (#PCDATA)>

<!--
	The name identifies the name of the attribute.
-->

<!ATTLIST  text-property name 			CDATA		#REQUIRED>

<!--
  		An property element allows for an object to be constructed based on the fully
        qualified classname in the factory attribute.
        Note that if the class specified extends <i>org.mule.config.PropertyFactory</a> the factory
        will be used to create the object.
-->

<!ELEMENT factory-property EMPTY>

<!--
	The name identifies the name of the attribute.
-->

<!ATTLIST factory-property name 			CDATA		#REQUIRED>
<!--
	A fully qualified classname of the factory to use.
-->
<!ATTLIST factory-property factory 			CDATA		#REQUIRED>

<!--
  	A property element allows properties to be set from from an IoC contianer
    configured on the Model
-->

<!ELEMENT container-property EMPTY>

<!--
	The name identifies the name of the attribute on the current object
-->

<!ATTLIST container-property name 			CDATA		#REQUIRED>
<!--
	The key identifier for the object to use in the container
-->
<!ATTLIST container-property reference 			CDATA		#REQUIRED>

<!--
	The container name to look up the reference in.  If this is not
    specified all containers are queried.  An exception will be thrown
    if this property is set but the reference was not found in the container
-->
<!ATTLIST container-property container 			CDATA		#IMPLIED>

<!--
	Whether an exception should be thrown if the component is not in the container.
    the default is true
-->
<!ATTLIST container-property required 			(true | false)		"true">
<!--
  	A property element allows properties to be set from the System properties
-->

<!ELEMENT system-property EMPTY>

<!--
	The name identifies the name of the attribute on the object being configured
-->

<!ATTLIST system-property name 			CDATA		#REQUIRED>

<!--
The system property key to use when lookin up the property
-->
<!ATTLIST system-property key 			CDATA		#REQUIRED>
<!--
	The default value will be used of the system property is not set.
-->
<!ATTLIST system-property defaultValue 			CDATA		#IMPLIED>
<!--
	Defines a set of properties for a map property
-->
<!ELEMENT map ((property | text-property | factory-property | container-property | system-property | map | list | file-properties)*)>

<!--
	the name of the map property
-->
<!ATTLIST map name					NMTOKEN		#REQUIRED>

<!--
	Defines a list of properties for a list property
-->
<!ELEMENT list ((entry | text-entry | factory-entry | system-entry | container-entry)*)>

<!--
	the name of the list property
-->
<!ATTLIST list name					NMTOKEN		#REQUIRED>

<!--
	Defines an entry for a list or array property
-->
<!ELEMENT entry EMPTY>

<!--
	the value of the entry
-->
<!ATTLIST entry value					CDATA		#REQUIRED>

<!--
	Defines an entry for a list or array property where the body of the element will
    be used as the value
-->
<!ELEMENT text-entry (#PCDATA)>
<!--
	Defines an factory entry for a list or array property
-->
<!ELEMENT factory-entry EMPTY>

<!--
	the factory class to use to create the entry
-->
<!ATTLIST factory-entry	factory				NMTOKEN		#REQUIRED>

<!--
	Defines an entry for a list or array property where the value is obtained
    from a container such as Spring
-->
<!ELEMENT container-entry EMPTY>

<!--
	the reference of the object in the container
-->
<!ATTLIST container-entry reference					NMTOKEN		#REQUIRED>

<!--
	determines if the object must be present in the container for configuration to
    succeed
-->
<!ATTLIST container-entry required					(true | false)		"true">
<!--
	Defines an entry for a list or array property
-->
<!ELEMENT system-entry EMPTY>

<!--
	the key of the system property
-->
<!ATTLIST system-entry key					    CDATA		#REQUIRED>

<!--
	a default value if the property is not found
-->
<!ATTLIST system-entry defaultValue			CDATA		#IMPLIED>

<!--
	Loads properies from a java.properties file
-->
<!ELEMENT file-properties EMPTY>

<!--
	The path to the properties file on the classpath or local file system
-->
<!ATTLIST file-properties location					NMTOKEN		#REQUIRED>

<!--
Whether the properties in the file override properties already set on this object
-->
<!ATTLIST file-properties override					(true | false)		"true">

<!--
	Optional description of the enclosing element.
	Used for user documentation of XML bean definition documents.
-->
<!ELEMENT description (#PCDATA)>