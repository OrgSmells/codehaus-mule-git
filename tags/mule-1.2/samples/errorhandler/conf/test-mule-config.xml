<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mule-configuration PUBLIC "-//SymphonySoft //DTD mule-configuration XML V1.0//EN"
                                "http://www.symphonysoft.com/dtds/mule/mule-configuration.dtd">

<!-- my local test config -->
<mule-configuration id="Test_Mule_Properties" version="1.0">

    <container-context className="org.mule.extras.spring.SpringContainerContext">
        <properties>
            <property name="configFile" value="src/samples/errorhandler/conf/applicationContext.xml"/>
        </properties>
    </container-context>

    <connector name="FileConnector" className="org.mule.providers.file.FileConnector">
        <properties>
            <property name="pollingFrequency" value="1000"/>
            <property name="moveToDirectory" value="test-data/samples/errorhandler/out"/>
            <property name="outputPattern" value="${DATE}.xml"/>
            <property name="binaryMode" value="false"/>
            <!--<property name="outputFilenameStrategy" value="org.mule.providers.file.DefaultFilenameStrategy"/>-->
            <!--<property name="outputFilename" value="./rollingFile.xml"/>-->
            <!--<property name="outputAppend" value="true"/>-->
        </properties>
    </connector>

    <connector name="EmailConnector" className="org.mule.providers.email.SmtpConnector">
        <properties>
            <property name="fromAddress" value="eh@muleumo.org"/>
            <property name="hostname" value="mail.muleumo.org"/>
            <!--property name="smtpUsername" value="rossmason1"/>-->
            <!--<property name="smtpPassword" value="xxxx"/-->
            <!--<property name="ccAddresses" value="ross.mason@symphonysoft.com"/>-->
            <!--<property name="bccAddresses" value="ross.mason@another.com"/>-->
            <!--<property name="toAddresses" value="ross.mason@yet-another.com"/>-->
        </properties>
    </connector>

    <connector name="JMSConnector" className="org.mule.providers.jms.JmsConnector">
        <properties>
            <property name="jndiInitialFactory" value="org.exolab.jms.jndi.InitialContextFactory"/>
            <property name="jndiProviderUrl" value="rmi://localhost:1099/"/>
            <property name="connectionFactoryJndiName" value="JmsQueueConnectionFactory"/>
        </properties>
    </connector>

    <!--    <connector name="JMSConnector" className="org.mule.providers.jms.JmsConnector">-->
    <!--        <properties>-->
    <!--            <property name="connectionFactoryJndiName" value="QueueConnectionFactory"/>-->
    <!--            <property name="specification" value="1.1"/>-->
    <!--            <property name="jndiDestinations" value="true"/>-->
    <!--            <list name="jndiQueues">-->
    <!--                <entry value="exception.queue"/>-->
    <!--            </list>-->
    <!--            <property-factory name="jndiContext" value="org.mule.samples.errorhandler.JoramTest"/>-->
    <!--        </properties>-->
    <!--    </connector>-->


    <transformers>
        <transformer name="XMLToExceptionBean" className="org.mule.transformers.xml.XmlToObject"
            returnClass="org.mule.samples.errorhandler.ExceptionBean"/>
        <transformer name="ExceptionBeanToXML" className="org.mule.transformers.xml.ObjectToXml"
            returnClass="java.lang.String"/>
        <transformer name="FileMessageToObject" className="org.mule.providers.file.transformers.FileMessageToObject"
            returnClass="java.lang.String"/>
        <transformer name="ExceptionBeanToErrorMessage" className="org.mule.samples.errorhandler.ExceptionBeanToErrorMessage"
            returnClass="org.mule.samples.errorhandler.ErrorMessage"/>
        <transformer name="ErrorMessageToException" className="org.mule.samples.errorhandler.ErrorMessageToException"
            returnClass="java.lang.Throwable"/>
        <transformer name="ErrorMessageToExceptionBean" className="org.mule.samples.errorhandler.ErrorMessageToExceptionBean"
            returnClass="org.mule.samples.errorhandler.ExceptionBean"/>
        <transformer name="StringToEmailMessage" className="org.mule.providers.email.transformers.StringToEmailMessage"
            returnClass="javax.mail.Message"/>
        <transformer name="ObjectToJMSMessage" className="org.mule.providers.jms.transformers.ObjectToJMSMessage"
            returnClass="javax.jms.TextMessage">
        </transformer>
        <transformer name="JMSMessageToObject" className="org.mule.providers.jms.transformers.JMSMessageToObject"
            returnClass="java.lang.String"/>
    </transformers>

    <interceptor-stack name="default">
        <interceptor className="org.mule.interceptors.LoggingInterceptor"/>
        <interceptor className="org.mule.interceptors.TimerInterceptor"/>
    </interceptor-stack>

    <model name="errorhandler-test">

        <!-- this uses an Url endpointUri instead of a provider config.  Note that this specifies a relative path
        as the endpoiint though fully qualified uri will work ie. file:///usr/test-data/samples/errorhandler/in
        -->
        <mule-descriptor name="Error Manager"
            inboundEndpoint="file://../test-data/samples/errorhandler/in"
            inboundTransformer="FileMessageToObject XMLToExceptionBean ExceptionBeanToErrorMessage"
            implementation="errorManager">

            <outbound-router>
                <catch-all-strategy className="org.mule.routing.LoggingCatchAllStrategy"/>
                <router className="org.mule.routing.outbound.FilteringOutboundRouter">
                    <endpoint address="file://../test-data/samples/errorhandler/exceptions" transformers="ErrorMessageToExceptionBean ExceptionBeanToXML">
                        <properties>
                            <property name="outputPattern" value="Exception-${UUID}.xml"/>
                        </properties>
                    </endpoint>
                    <filter className="org.mule.routing.filters.PayloadTypeFilter" expectedType="org.mule.MuleException"/>
                    <properties>
                        <property name="transformer" value="ErrorMessageToException"/>
                    </properties>
                </router>
                <router className="org.mule.routing.outbound.FilteringOutboundRouter">
                    <endpoint address="smtp://exceptions@symphonysoft.com" transformers="ErrorMessageToExceptionBean ExceptionBeanToXML StringToEmailMessage">
                        <properties>
                            <property name="ccAddresses" value="anotheremail@symphonysoft.com"/>
                        </properties>
                    </endpoint>
                    <filter className="org.mule.routing.filters.PayloadTypeFilter" expectedType="org.mule.umo.lifecycle.FatalException"/>
                    <properties>
                        <property name="transformer" value="ErrorMessageToException"/>
                    </properties>
                </router>

                <router className="org.mule.routing.outbound.FilteringOutboundRouter">
                    <endpoint address="jms://exception.queue" transformers="ErrorMessageToExceptionBean ExceptionBeanToXML ObjectToJMSMessage"/>
                    <filter className="org.mule.routing.filters.PayloadTypeFilter" expectedType="org.mule.samples.errorhandler.exceptions.BusinessException"/>
                    <properties>
                        <property name="transformer" value="ErrorMessageToException"/>
                    </properties>
                </router>
            </outbound-router>
            <interceptor name="default"/>
        </mule-descriptor>

        <mule-descriptor name="Business Error Manager"
            inboundEndpoint="jms://exception.queue"
            inboundTransformer="JMSMessageToObject XMLToExceptionBean ExceptionBeanToErrorMessage"
            implementation="businessErrorManager">
        </mule-descriptor>
    </model>
</mule-configuration>
