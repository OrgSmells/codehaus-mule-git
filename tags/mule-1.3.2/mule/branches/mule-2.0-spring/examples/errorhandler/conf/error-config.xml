<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mule-configuration PUBLIC "-//MuleSource //DTD mule-configuration XML V1.0//EN"
                                "http://mule.mulesource.org/dtds/mule-configuration.dtd">

<mule-configuration id="Mule_Error_Handler_Sample" version="1.0">

    <description>
    Demonstrates using Spring as the external container to provide the objects managed by Mule and
    how to publish events to multiple outbound endpoints. The example consists of two components:
    ExceptionManager and BusinessErrorManager.
    </description>

    <environment-properties>
        <file-properties location="email.properties" />
    </environment-properties>

    <container-context className="org.mule.config.spring.SpringContainerContext">
        <properties>
            <property name="configFile" value="error-beans.xml"/>
        </properties>
    </container-context>

    <connector name="EmailConnector" className="org.mule.providers.email.SmtpConnector">
        <properties>
            <property name="host" value="${smtp.host}" />
            <property name="port" value="{smtp.port}" />
            <property name="username" value="{smtp.username}" />
            <property name="password" value="{smtp.password}" />
        </properties>
    </connector>

    <connector name="JMSConnector" className="org.mule.providers.jms.JmsConnector">
        <properties>
            <property name="specification" value="1.1"/>
            <!-- This property references the Spring container defined above -->
            <container-property name="connectionFactory" reference="activeMqConnectionFactory" />
        </properties>
    </connector>

    <connector name="FileConnector" className="org.mule.providers.file.FileConnector">
        <properties>
            <property name="pollingFrequency" value="1000"/>
            <property name="moveToDirectory" value="./test-data/out"/>
            <property name="outputPattern" value="${DATE}.xml"/>
            <property name="binaryMode" value="false"/>
        </properties>
    </connector>

    <transformers>
        <transformer name="XMLToExceptionBean" className="org.mule.transformers.xml.XmlToObject"
            returnClass="org.mule.samples.errorhandler.ExceptionBean"/>
        <transformer name="ExceptionBeanToXML" className="org.mule.transformers.xml.ObjectToXml"
            returnClass="java.lang.String"/>
        <transformer name="ExceptionBeanToErrorMessage" className="org.mule.samples.errorhandler.ExceptionBeanToErrorMessage"
            returnClass="org.mule.samples.errorhandler.ErrorMessage"/>
        <transformer name="ErrorMessageToException" className="org.mule.samples.errorhandler.ErrorMessageToException"
            returnClass="java.lang.Throwable"/>
        <transformer name="ErrorMessageToExceptionBean" className="org.mule.samples.errorhandler.ErrorMessageToExceptionBean"
            returnClass="org.mule.samples.errorhandler.ExceptionBean"/>
        <transformer name="StringToEmailMessage" className="org.mule.providers.email.transformers.StringToEmailMessage"
            returnClass="javax.mail.Message"/>
        <transformer name="ObjectToJMSMessage" className="org.mule.providers.jms.transformers.ObjectToJMSMessage"
            returnClass="javax.jms.TextMessage">
        </transformer>
        <transformer name="JMSMessageToObject" className="org.mule.providers.jms.transformers.JMSMessageToObject"
            returnClass="java.lang.String"/>
    </transformers>

    <interceptor-stack name="default">
        <interceptor className="org.mule.interceptors.LoggingInterceptor"/>
        <interceptor className="org.mule.interceptors.TimerInterceptor"/>
    </interceptor-stack>

    <model name="errorhandler-test">

        <!-- this uses an Url endpointUri instead of a provider config.  Note that this specifies a relative path
        as the endpoiint though fully qualified uri will work ie. file:///usr/test-data/samples/errorhandler/in
        -->
        <mule-descriptor name="Error Manager" implementation="errorManager">
            <inbound-router>
                <endpoint address="file://./test-data/in"
                          transformers="XMLToExceptionBean ExceptionBeanToErrorMessage" />
            </inbound-router>

            <outbound-router>
                <catch-all-strategy className="org.mule.routing.LoggingCatchAllStrategy"/>

                <router className="org.mule.routing.outbound.FilteringOutboundRouter"
                        transformer="ErrorMessageToException">

                    <endpoint address="file://./test-data/exceptions"
                              transformers="ErrorMessageToExceptionBean ExceptionBeanToXML">

                        <properties><property name="outputPattern" value="Exception-${UUID}.xml" /></properties>
                    </endpoint>
                    <filter className="org.mule.routing.filters.PayloadTypeFilter"
                            expectedType="org.mule.MuleException" />
                </router>

                <router className="org.mule.routing.outbound.FilteringOutboundRouter"
                        transformer="ErrorMessageToException">

                    <endpoint address="smtp://?address=${email.toAddress}"
                              transformers="ErrorMessageToExceptionBean ExceptionBeanToXML StringToEmailMessage">
                        <properties>
                            <property name="fromAddress" value="${email.fromAddress}" />
                            <property name="subject" value="${email.subject}" />
                        </properties>
                       </endpoint>

                    <filter className="org.mule.routing.filters.PayloadTypeFilter"
                                        expectedType="org.mule.umo.lifecycle.FatalException"/>
                </router>

                <router className="org.mule.routing.outbound.FilteringOutboundRouter"
                        transformer="ErrorMessageToException">

                    <endpoint address="jms://exception.queue"
                              transformers="ErrorMessageToExceptionBean ExceptionBeanToXML ObjectToJMSMessage"/>

                    <filter className="org.mule.routing.filters.PayloadTypeFilter"
                            expectedType="org.mule.samples.errorhandler.exceptions.BusinessException"/>
                </router>
            </outbound-router>

            <interceptor name="default"/>
        </mule-descriptor>

        <mule-descriptor name="Business Error Manager" implementation="businessErrorManager">
            <inbound-router>
                <endpoint address="jms://exception.queue"
                          transformers="JMSMessageToObject XMLToExceptionBean ExceptionBeanToErrorMessage" />
            </inbound-router>
        </mule-descriptor>
    </model>
</mule-configuration>
