<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/${MuleMajorMinorVersion}"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
#if($hasCustomSchema == "y")
       xmlns:${ModuleNameLower}="http://www.mulesource.org/schema/mule/${ModuleNameLower}/${MuleMajorMinorVersion}"
#end
    xsi:schemaLocation="
       http://www.mulesource.org/schema/mule/core/${MuleMajorMinorVersion} http://www.mulesource.org/schema/mule/core/${MuleMajorMinorVersion}/mule.xsd
#if($hasCustomSchema  == "y")
       http://www.mulesource.org/schema/mule/${ModuleNameLower}/${MuleMajorMinorVersion} http://www.mulesource.org/schema/mule/${ModuleNameLower}/${MuleMajorMinorVersion}/mule-${ModuleNameLower}.xsd
#end
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">


    <!--
    TODO: You can define a test configuration here then from the ${ModuleName}TestCase you can fire events into
    Mule (using the MuleClient) and then assert the results.
    -->
    <model name="main">

        <service name="testService">
            <inbound>
                <inbound-endpoint address="vm://in" synchronous="true"/>
            </inbound>

            <!-- TODO add your service component here. This can also be a Spring bean using <spring-object bean="name"/> -->
            <component>
                <singleton-object class="org.mule.tck.functional.FunctionalTestComponent">
                    <property key="addReceived" value="true"/>
                </singleton-object>
            </component>

            <outbound>
                <outbound-pass-through-router>
                    <outbound-endpoint address="stdio://System.out"/>
                </outbound-pass-through-router>
            </outbound>
        </service>

    </model>

</mule>
